(assume a0 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (= (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (= smt__x smt__y)) :pattern ((smt__TLA______SetExtTrigger smt__x smt__y)))))
(assume a1 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (=> (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (smt__TLA______SubsetEq smt__x smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y)))))
(assume a2 (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y))))
(assume a3 (forall ((smt__a Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Subset smt__a)) (smt__TLA______SubsetEq smt__x smt__a)) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Subset smt__a))) :pattern ((smt__TLA______SubsetEq smt__x smt__a) (smt__TLA______Subset smt__a)))))
(assume a4 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Cup smt__a smt__b)) (or (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Cup smt__a smt__b))) :pattern ((smt__TLA______Mem smt__x smt__a) (smt__TLA______Cup smt__a smt__b)) :pattern ((smt__TLA______Mem smt__x smt__b) (smt__TLA______Cup smt__a smt__b)))))
(assume a5 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))))
(assume a6 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b)))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b))) :pattern ((smt__TLA______Mem smt__x smt__a) (smt__TLA______SetMinus smt__a smt__b)) :pattern ((smt__TLA______Mem smt__x smt__b) (smt__TLA______SetMinus smt__a smt__b)))))
(assume a7 (forall ((smt__f Idv) (smt__g Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g) (= (smt__TLA______FunDom smt__f) (smt__TLA______FunDom smt__g)) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp smt__f smt__x) (smt__TLA______FunApp smt__g smt__x))))) (= smt__f smt__g)) :pattern ((smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g)))))
(assume a8 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (! (smt__TLA______FunIsafcn (smt__TLA______FunExcept smt__f smt__x smt__y)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y)))))
(assume a9 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______FunDom (smt__TLA______FunExcept smt__f smt__x smt__y)) (smt__TLA______FunDom smt__f)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y)))))
(assume a10 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (! (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__x) smt__y)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y)))))
(assume a11 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (! (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :pattern ((smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y) (smt__TLA______FunApp smt__f smt__z)))))
(assume a12 (forall ((smt__x Idv) (smt__y Idv)) (! (smt__TLA______SetExtTrigger (smt__TLA______Cap smt__x smt__y) smt__TLA______SetEnum___0) :pattern ((smt__TLA______Cap smt__x smt__y)))))
(assume a13 (forall ((smt__x Idv)) (! (not (smt__TLA______Mem smt__x smt__TLA______SetEnum___0)) :pattern ((smt__TLA______Mem smt__x smt__TLA______SetEnum___0)))))
(assume a14 (forall ((smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)) :pattern ((smt__TLA______TrigEq___Idv smt__x smt__y)))))
(assume a15 (forall ((smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y) (= smt__x smt__y)) :pattern ((smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y)))))
(assume a16 (forall ((smt__x Idv) (smt__y Idv)) (! (smt__TLA______SetExtTrigger smt__x smt__y) :pattern ((smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y)))))
(assume a17 (smt__TLA______Mem smt__CONSTANT___clt___ smt__CONSTANT___Client___))
(assume a18 (smt__TLA______Mem smt__CONSTANT___S___ (smt__TLA______Subset smt__CONSTANT___Resource___)))
(assume a19 (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))
(assume a20 (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))
(assume a21 (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___))
(assume a22 (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv) (and (not (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__CONSTANT___S___ smt__TLA______SetEnum___0)) (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))))
(assume a23 (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))
(assume a24 (smt__TLA______TrigEq___Idv smt__VARIABLE___unsat______prime (smt__TLA______FunExcept smt__VARIABLE___unsat___ smt__CONSTANT___clt___ (smt__TLA______SetMinus (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))
(assume a25 (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))
(assume a26 (not (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___)))
(assume a27 (not (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___))))
(step t1 (cl (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) :rule equiv_pos2)
(step t2 (cl (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))))) :rule reordering :premises (t1))
(step t3 (cl (not (or (not (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))) (not (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) :rule or_pos)
(step t4 (cl (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)) (not (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))) (not (or (not (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))))) :rule reordering :premises (t3))
(step t5 (cl (not (= (not (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___))) (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___))) (not (not (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)))) (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)) :rule equiv_pos2)
(step t6 (cl (= (not (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___))) (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___))) :rule rare_rewrite :args ("bool-double-not-elim" (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)))
(step t7 (cl (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)) :rule resolution :premises (t5 t6 a27))
(step t8 (cl (and (not (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__CONSTANT___S___ smt__TLA______SetEnum___0)) (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))) :rule and :premises (a22))
(step t9 (cl (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) :rule and :premises (t8))
(step t10 (cl (or (not (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______SubsetEq smt__x smt__y)) (not (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)))) (or (not (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))))) :rule forall_inst :args ((:= smt__x smt__CONSTANT___S___) (:= smt__y (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))) (:= smt__z smt__CONSTANT___r___)))
(step t11 (cl (not (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______SubsetEq smt__x smt__y)) (not (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)))) (or (not (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))) :rule or :premises (t10))
(step t12 (cl (not (= (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y))) (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______SubsetEq smt__x smt__y)) (not (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y))))) (not (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)))) (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______SubsetEq smt__x smt__y)) (not (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)))) :rule equiv_pos2)
(step t13 (cl (= (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y))) (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______SubsetEq smt__x smt__y)) (not (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y))))) :rule all_simplify)
(step t14 (cl (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______SubsetEq smt__x smt__y)) (not (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)))) :rule resolution :premises (t12 t13 a2))
(step t15 (cl (or (not (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))) :rule resolution :premises (t11 t14))
(step t16 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) :rule resolution :premises (t4 t7 t9 t15))
(step t17 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))) (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___)) :rule and_pos)
(step t18 (cl (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (not (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))) :rule reordering :premises (t17))
(step t19 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))) :rule resolution :premises (t18 a26))
(step t20 (cl (or (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)))))) :rule forall_inst :args ((:= smt__a smt__STATE___available___) (:= smt__b (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___)) (:= smt__x smt__CONSTANT___r___)))
(step t21 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))) :rule or :premises (t20))
(step t22 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))) :rule resolution :premises (t21 a5))
(step t23 (cl) :rule resolution :premises (t2 t16 t19 t22))

