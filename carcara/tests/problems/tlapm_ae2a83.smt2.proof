(assume SetExt (forall ((smt__x Idv) (smt__y Idv)) (=> (forall ((smt__z Idv)) (= (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (= smt__x smt__y))))
(assume SubsetEqIntro (forall ((smt__x Idv) (smt__y Idv)) (=> (forall ((smt__z Idv)) (=> (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (smt__TLA______SubsetEq smt__x smt__y))))
(assume SubsetEqElim (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y))))
(assume SubsetDefAlt (forall ((smt__a Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Subset smt__a)) (smt__TLA______SubsetEq smt__x smt__a))))
(assume CupDef (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cup smt__a smt__b)) (or (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))))
(assume CapDef (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))))
(assume SetMinusDef (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b))))))
(assume FunExt (forall ((smt__f Idv) (smt__g Idv)) (=> (and (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g) (= (smt__TLA______FunDom smt__f) (smt__TLA______FunDom smt__g)) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp smt__f smt__x) (smt__TLA______FunApp smt__g smt__x))))) (= smt__f smt__g))))
(assume FunSetIntro (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b)))) (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)))))
(assume FunSetElim1 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))))
(assume FunSetElim2 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv) (smt__x Idv)) (=> (and (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__x smt__a)) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b))))
(assume FunExceptIsafcn (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (smt__TLA______FunIsafcn (smt__TLA______FunExcept smt__f smt__x smt__y))))
(assume FunExceptDomDef (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (= (smt__TLA______FunDom (smt__TLA______FunExcept smt__f smt__x smt__y)) (smt__TLA______FunDom smt__f))))
(assume FunExceptAppDef1 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__x) smt__y))))
(assume FunExceptAppDef2 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))
(assume DisjointTrigger (forall ((smt__x Idv) (smt__y Idv)) (smt__TLA______SetExtTrigger (smt__TLA______Cap smt__x smt__y) smt__TLA______SetEnum___0)))
(assume |EnumDefElim 0| (forall ((smt__x Idv)) (not (smt__TLA______Mem smt__x smt__TLA______SetEnum___0))))
(assume |ExtTrigEqDef Idv| (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(assume |ExtTrigEqDef Set$Idv$| (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y) (= smt__x smt__y))))
(assume |ExtTrigEqTrigger Idv| (forall ((smt__x Idv) (smt__y Idv)) (smt__TLA______SetExtTrigger smt__x smt__y)))
(assume a20 (smt__TLA______Mem smt__CONSTANT___clt___ smt__CONSTANT___Client___))
(assume a21 (smt__TLA______Mem smt__CONSTANT___S___ (smt__TLA______Subset smt__CONSTANT___Resource___)))
(assume a22 (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))
(assume a23 (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))
(assume a24 (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___))
(assume a25 (and (and (smt__TLA______Mem smt__VARIABLE___unsat___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))) (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv) (and (not (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__CONSTANT___S___ smt__TLA______SetEnum___0)) (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))))
(assume a26 (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))
(assume a27 (smt__TLA______TrigEq___Idv smt__VARIABLE___unsat______prime (smt__TLA______FunExcept smt__VARIABLE___unsat___ smt__CONSTANT___clt___ (smt__TLA______SetMinus (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))
(assume a28 (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___))
(assume a29 (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))
(assume Goal (not (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))
(step t0 (cl (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (not (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule and_neg)
(step t1 (cl (=> (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule implies_neg1)
(anchor :step t2)
(assume t2.a0 (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))
(assume t2.a1 (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))
(step t2.t0 (cl (not (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))) (not (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) :rule equiv_pos2)
(step t2.t1 (cl (not (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (not (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))))) :rule reordering :premises (t2.t0))
(step t2.t2 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))))) :rule forall_inst :args ((:= smt__x smt__VARIABLE___alloc______prime) (:= smt__y (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))))
(step t2.t3 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))) :rule or :premises (t2.t2))
(step t2.t4 (cl (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))) :rule resolution :premises (t2.t3 |ExtTrigEqDef Idv|))
(step t2.t5 (cl (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) :rule resolution :premises (t2.t1 a26 t2.t4))
(step t2.t6 (cl (= smt__CONSTANT___c2___ smt__CONSTANT___c2___)) :rule refl)
(step t2.t7 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) :rule cong :premises (t2.t5 t2.t6))
(step t2.t8 (cl (not (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) :rule or_pos)
(step t2.t9 (cl (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)) (not (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule reordering :premises (t2.t8))
(step t2.t10 (cl (= (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) false) (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)))) :rule equiv_simplify)
(step t2.t11 (cl (not (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) false)) (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule equiv1 :premises (t2.t10))
(step t2.t12 (cl (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___)) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) :rule equiv_pos2)
(step t2.t13 (cl (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___)) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule reordering :premises (t2.t12))
(step t2.t14 (cl (not (= (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))))) (not (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule equiv_pos2)
(step t2.t15 (cl (= (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))) :rule refl)
(step t2.t16 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule refl)
(step t2.t17 (cl (= (= smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule rare_rewrite :args ("eq-symm" smt__CONSTANT___c1___ smt__CONSTANT___clt___))
(step t2.t18 (cl (= (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule cong :premises (t2.t16 t2.t17))
(step t2.t19 (cl (= (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))))) :rule cong :premises (t2.t15 t2.t18))
(step t2.t20 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) :rule implies_neg1)
(anchor :step t2.t21)
(assume t2.t21.a0 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(step t2.t21.t0 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule forall_inst :args ((:= smt__x smt__CONSTANT___c1___) (:= smt__y smt__CONSTANT___clt___)))
(step t2.t21.t1 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule or :premises (t2.t21.t0))
(step t2.t21.t2 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule resolution :premises (t2.t21.t1 t2.t21.a0))
(step t2.t21 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule subproof :discharge (t2.t21.a0))
(step t2.t22 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule resolution :premises (t2.t20 t2.t21))
(step t2.t23 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule implies_neg2)
(step t2.t24 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule resolution :premises (t2.t22 t2.t23))
(step t2.t25 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule contraction :premises (t2.t24))
(step t2.t26 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule resolution :premises (t2.t14 t2.t19 t2.t25))
(step t2.t27 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule implies :premises (t2.t26))
(step t2.t28 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule resolution :premises (t2.t27 |ExtTrigEqDef Idv|))
(step t2.t29 (cl (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) :rule resolution :premises (t2.t13 a28 t2.t28))
(step t2.t30 (cl (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule cong :premises (t2.t29 t2.t6))
(step t2.t31 (cl (= (= (= smt__CONSTANT___c1___ smt__CONSTANT___c2___) false) (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) :rule equiv_simplify)
(step t2.t32 (cl (= (= smt__CONSTANT___c1___ smt__CONSTANT___c2___) false) (not (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) :rule equiv2 :premises (t2.t31))
(step t2.t33 (cl (not (not (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)) :rule not_not)
(step t2.t34 (cl (= (= smt__CONSTANT___c1___ smt__CONSTANT___c2___) false) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)) :rule resolution :premises (t2.t32 t2.t33))
(step t2.t35 (cl (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule equiv_pos1)
(step t2.t36 (cl (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) :rule reordering :premises (t2.t35))
(step t2.t37 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) :rule forall_inst :args ((:= smt__x smt__CONSTANT___c1___) (:= smt__y smt__CONSTANT___c2___)))
(step t2.t38 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule or :premises (t2.t37))
(step t2.t39 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule resolution :premises (t2.t38 |ExtTrigEqDef Idv|))
(step t2.t40 (cl (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule resolution :premises (t2.t36 a29 t2.t39))
(step t2.t41 (cl (= (= smt__CONSTANT___c1___ smt__CONSTANT___c2___) false)) :rule resolution :premises (t2.t34 t2.t40))
(step t2.t42 (cl (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) false)) :rule trans :premises (t2.t30 t2.t41))
(step t2.t43 (cl (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule resolution :premises (t2.t11 t2.t42))
(step t2.t44 (cl (not (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule and_pos)
(step t2.t45 (cl (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (not (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule reordering :premises (t2.t44))
(step t2.t46 (cl (not (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule or_pos)
(step t2.t47 (cl (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule reordering :premises (t2.t46))
(step t2.t48 (cl (= (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true) (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule equiv_simplify)
(step t2.t49 (cl (not (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true)) (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule equiv1 :premises (t2.t48))
(step t2.t50 (cl (not (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule and_pos)
(step t2.t51 (cl (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) (not (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule reordering :premises (t2.t50))
(step t2.t52 (cl (not (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule or_pos)
(step t2.t53 (cl (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (not (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))))) :rule reordering :premises (t2.t52))
(step t2.t54 (cl (and (smt__TLA______Mem smt__VARIABLE___unsat___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))) (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))))) :rule and :premises (a25))
(step t2.t55 (cl (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) :rule and :premises (t2.t54))
(step t2.t56 (cl (or (not (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))))) :rule forall_inst :args ((:= smt__a smt__CONSTANT___Client___) (:= smt__b (smt__TLA______Subset smt__CONSTANT___Resource___)) (:= smt__f smt__VARIABLE___alloc___)))
(step t2.t57 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule or :premises (t2.t56))
(step t2.t58 (cl (not (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) (not (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a))))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule equiv_pos2)
(anchor :step t2.t59 :args ((smt__a Idv) (:= smt__a smt__a) (smt__b Idv) (:= smt__b smt__b) (smt__f Idv) (:= smt__f smt__f)))
(step t2.t59.t0 (cl (= (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)))) :rule refl)
(step t2.t59.t1 (cl (= (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__f))) :rule refl)
(step t2.t59.t2 (cl (= (= (smt__TLA______FunDom smt__f) smt__a) (= smt__a (smt__TLA______FunDom smt__f)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunDom smt__f) smt__a))
(step t2.t59.t3 (cl (= (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))) :rule cong :premises (t2.t59.t1 t2.t59.t2))
(step t2.t59.t4 (cl (= (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a))) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule cong :premises (t2.t59.t0 t2.t59.t3))
(step t2.t59 (cl (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) :rule bind)
(step t2.t60 (cl (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) :rule all_simplify)
(step t2.t61 (cl (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) :rule trans :premises (t2.t59 t2.t60))
(step t2.t62 (cl (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule resolution :premises (t2.t58 t2.t61 FunSetElim1))
(step t2.t63 (cl (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule resolution :premises (t2.t57 t2.t62))
(step t2.t64 (cl (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule resolution :premises (t2.t53 t2.t55 t2.t63))
(step t2.t65 (cl (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule resolution :premises (t2.t51 t2.t64))
(step t2.t66 (cl (= (smt__TLA______FunDom smt__VARIABLE___alloc___) smt__CONSTANT___Client___)) :rule symm :premises (t2.t65))
(step t2.t67 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule cong :premises (t2.t6 t2.t66))
(step t2.t68 (cl (= (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) true) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule equiv_simplify)
(step t2.t69 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) true) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule equiv2 :premises (t2.t68))
(step t2.t70 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) true)) :rule resolution :premises (t2.t69 a23))
(step t2.t71 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true)) :rule trans :premises (t2.t67 t2.t70))
(step t2.t72 (cl (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule resolution :premises (t2.t49 t2.t71))
(step t2.t73 (cl (not (= (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))))) (not (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule equiv_pos2)
(step t2.t74 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule refl)
(step t2.t75 (cl (= (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule refl)
(step t2.t76 (cl (= (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule refl)
(step t2.t77 (cl (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule refl)
(step t2.t78 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))
(step t2.t79 (cl (= (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule cong :premises (t2.t77 t2.t78))
(step t2.t80 (cl (= (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule cong :premises (t2.t76 t2.t79))
(step t2.t81 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule cong :premises (t2.t75 t2.t80))
(step t2.t82 (cl (= (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))))) :rule cong :premises (t2.t74 t2.t81))
(step t2.t83 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule implies_neg1)
(anchor :step t2.t84)
(assume t2.t84.a0 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))
(step t2.t84.t0 (cl (or (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule forall_inst :args ((:= smt__f smt__VARIABLE___alloc___) (:= smt__x smt__CONSTANT___clt___) (:= smt__y (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) (:= smt__z smt__CONSTANT___c2___)))
(step t2.t84.t1 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule or :premises (t2.t84.t0))
(step t2.t84.t2 (cl (not (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule equiv_pos2)
(anchor :step t2.t84.t3 :args ((smt__f Idv) (:= smt__f smt__f) (smt__x Idv) (:= smt__x smt__x) (smt__y Idv) (:= smt__y smt__y) (smt__z Idv) (:= smt__z smt__z)))
(step t2.t84.t3.t0 (cl (= (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)))) :rule refl)
(step t2.t84.t3.t1 (cl (= (= smt__z smt__x) (= smt__x smt__z))) :rule rare_rewrite :args ("eq-symm" smt__z smt__x))
(step t2.t84.t3.t2 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y))
(step t2.t84.t3.t3 (cl (= (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))) :rule cong :premises (t2.t84.t3.t1 t2.t84.t3.t2))
(step t2.t84.t3.t4 (cl (= (distinct smt__z smt__x) (not (= smt__z smt__x)))) :rule rare_rewrite :args ("distinct-binary-elim" smt__z smt__x))
(step t2.t84.t3.t5 (cl (= (not (= smt__z smt__x)) (not (= smt__x smt__z)))) :rule cong :premises (t2.t84.t3.t1))
(step t2.t84.t3.t6 (cl (= (distinct smt__z smt__x) (not (= smt__x smt__z)))) :rule trans :premises (t2.t84.t3.t4 t2.t84.t3.t5))
(step t2.t84.t3.t7 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) :rule refl)
(step t2.t84.t3.t8 (cl (= (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule cong :premises (t2.t84.t3.t6 t2.t84.t3.t7))
(step t2.t84.t3.t9 (cl (= (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) :rule cong :premises (t2.t84.t3.t3 t2.t84.t3.t8))
(step t2.t84.t3.t10 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule cong :premises (t2.t84.t3.t0 t2.t84.t3.t9))
(step t2.t84.t3 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule bind)
(step t2.t84.t4 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule all_simplify)
(step t2.t84.t5 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule trans :premises (t2.t84.t3 t2.t84.t4))
(step t2.t84.t6 (cl (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule resolution :premises (t2.t84.t2 t2.t84.t5 FunExceptAppDef2))
(step t2.t84.t7 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule resolution :premises (t2.t84.t1 t2.t84.t6))
(step t2.t84 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule subproof :discharge (t2.t84.a0))
(step t2.t85 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule resolution :premises (t2.t83 t2.t84))
(step t2.t86 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule implies_neg2)
(step t2.t87 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule resolution :premises (t2.t85 t2.t86))
(step t2.t88 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule contraction :premises (t2.t87))
(step t2.t89 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule resolution :premises (t2.t73 t2.t82 t2.t88))
(step t2.t90 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule implies :premises (t2.t89))
(step t2.t91 (cl (not (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule equiv_pos2)
(anchor :step t2.t92 :args ((smt__f Idv) (:= smt__f smt__f) (smt__x Idv) (:= smt__x smt__x) (smt__y Idv) (:= smt__y smt__y) (smt__z Idv) (:= smt__z smt__z)))
(step t2.t92.t0 (cl (= (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)))) :rule refl)
(step t2.t92.t1 (cl (= (= smt__z smt__x) (= smt__x smt__z))) :rule rare_rewrite :args ("eq-symm" smt__z smt__x))
(step t2.t92.t2 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y))
(step t2.t92.t3 (cl (= (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))) :rule cong :premises (t2.t92.t1 t2.t92.t2))
(step t2.t92.t4 (cl (= (distinct smt__z smt__x) (not (= smt__z smt__x)))) :rule rare_rewrite :args ("distinct-binary-elim" smt__z smt__x))
(step t2.t92.t5 (cl (= (not (= smt__z smt__x)) (not (= smt__x smt__z)))) :rule cong :premises (t2.t92.t1))
(step t2.t92.t6 (cl (= (distinct smt__z smt__x) (not (= smt__x smt__z)))) :rule trans :premises (t2.t92.t4 t2.t92.t5))
(step t2.t92.t7 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) :rule refl)
(step t2.t92.t8 (cl (= (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule cong :premises (t2.t92.t6 t2.t92.t7))
(step t2.t92.t9 (cl (= (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) :rule cong :premises (t2.t92.t3 t2.t92.t8))
(step t2.t92.t10 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule cong :premises (t2.t92.t0 t2.t92.t9))
(step t2.t92 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule bind)
(step t2.t93 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule all_simplify)
(step t2.t94 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule trans :premises (t2.t92 t2.t93))
(step t2.t95 (cl (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule resolution :premises (t2.t91 t2.t94 FunExceptAppDef2))
(step t2.t96 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule resolution :premises (t2.t90 t2.t95))
(step t2.t97 (cl (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule resolution :premises (t2.t47 t2.t72 t2.t96))
(step t2.t98 (cl (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule resolution :premises (t2.t45 t2.t97))
(step t2.t99 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) :rule resolution :premises (t2.t9 t2.t43 t2.t98))
(step t2.t100 (cl (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule symm :premises (t2.t99))
(step t2.t101 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule trans :premises (t2.t7 t2.t100))
(step t2 (cl (not (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule subproof :discharge (t2.a0 t2.a1))
(step t3 (cl (not (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) :rule and_pos)
(step t4 (cl (not (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) :rule and_pos)
(step t5 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (not (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (not (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule resolution :premises (t2 t3 t4))
(step t6 (cl (not (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (not (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule reordering :premises (t5))
(step t7 (cl (not (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule contraction :premises (t6))
(step t8 (cl (=> (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule resolution :premises (t1 t7))
(step t9 (cl (=> (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule implies_neg2)
(step t10 (cl (=> (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (=> (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule resolution :premises (t8 t9))
(step t11 (cl (=> (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule contraction :premises (t10))
(step t12 (cl (not (and (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule implies :premises (t11))
(step t13 (cl (not (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule resolution :premises (t0 t12))
(step t14 (cl (not (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule reordering :premises (t13))
(step t15 (cl (not (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) :rule or_pos)
(step t16 (cl (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)) (not (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule reordering :premises (t15))
(step t17 (cl (= (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) false) (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)))) :rule equiv_simplify)
(step t18 (cl (not (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) false)) (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule equiv1 :premises (t17))
(step t19 (cl (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___)) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) :rule equiv_pos2)
(step t20 (cl (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___)) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule reordering :premises (t19))
(step t21 (cl (not (= (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))))) (not (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule equiv_pos2)
(step t22 (cl (= (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))) :rule refl)
(step t23 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule refl)
(step t24 (cl (= (= smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule rare_rewrite :args ("eq-symm" smt__CONSTANT___c1___ smt__CONSTANT___clt___))
(step t25 (cl (= (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule cong :premises (t23 t24))
(step t26 (cl (= (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))))) :rule cong :premises (t22 t25))
(step t27 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) :rule implies_neg1)
(anchor :step t28)
(assume t28.a0 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(step t28.t0 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule forall_inst :args ((:= smt__x smt__CONSTANT___c1___) (:= smt__y smt__CONSTANT___clt___)))
(step t28.t1 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule or :premises (t28.t0))
(step t28.t2 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule resolution :premises (t28.t1 t28.a0))
(step t28 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule subproof :discharge (t28.a0))
(step t29 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule resolution :premises (t27 t28))
(step t30 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule implies_neg2)
(step t31 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule resolution :premises (t29 t30))
(step t32 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule contraction :premises (t31))
(step t33 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule resolution :premises (t21 t26 t32))
(step t34 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule implies :premises (t33))
(step t35 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule resolution :premises (t34 |ExtTrigEqDef Idv|))
(step t36 (cl (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) :rule resolution :premises (t20 a28 t35))
(step t37 (cl (= smt__CONSTANT___c2___ smt__CONSTANT___c2___)) :rule refl)
(step t38 (cl (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule cong :premises (t36 t37))
(step t39 (cl (= (= (= smt__CONSTANT___c1___ smt__CONSTANT___c2___) false) (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) :rule equiv_simplify)
(step t40 (cl (= (= smt__CONSTANT___c1___ smt__CONSTANT___c2___) false) (not (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) :rule equiv2 :premises (t39))
(step t41 (cl (not (not (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)) :rule not_not)
(step t42 (cl (= (= smt__CONSTANT___c1___ smt__CONSTANT___c2___) false) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)) :rule resolution :premises (t40 t41))
(step t43 (cl (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule equiv_pos1)
(step t44 (cl (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) :rule reordering :premises (t43))
(step t45 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) :rule forall_inst :args ((:= smt__x smt__CONSTANT___c1___) (:= smt__y smt__CONSTANT___c2___)))
(step t46 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule or :premises (t45))
(step t47 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule resolution :premises (t46 |ExtTrigEqDef Idv|))
(step t48 (cl (not (= smt__CONSTANT___c1___ smt__CONSTANT___c2___))) :rule resolution :premises (t44 a29 t47))
(step t49 (cl (= (= smt__CONSTANT___c1___ smt__CONSTANT___c2___) false)) :rule resolution :premises (t42 t48))
(step t50 (cl (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) false)) :rule trans :premises (t38 t49))
(step t51 (cl (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule resolution :premises (t18 t50))
(step t52 (cl (not (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule and_pos)
(step t53 (cl (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (not (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule reordering :premises (t52))
(step t54 (cl (not (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule or_pos)
(step t55 (cl (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule reordering :premises (t54))
(step t56 (cl (= (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true) (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule equiv_simplify)
(step t57 (cl (not (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true)) (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule equiv1 :premises (t56))
(step t58 (cl (not (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule and_pos)
(step t59 (cl (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) (not (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule reordering :premises (t58))
(step t60 (cl (not (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule or_pos)
(step t61 (cl (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (not (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))))) :rule reordering :premises (t60))
(step t62 (cl (and (smt__TLA______Mem smt__VARIABLE___unsat___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))) (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))))) :rule and :premises (a25))
(step t63 (cl (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) :rule and :premises (t62))
(step t64 (cl (or (not (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))))) :rule forall_inst :args ((:= smt__a smt__CONSTANT___Client___) (:= smt__b (smt__TLA______Subset smt__CONSTANT___Resource___)) (:= smt__f smt__VARIABLE___alloc___)))
(step t65 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule or :premises (t64))
(step t66 (cl (not (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) (not (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a))))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule equiv_pos2)
(anchor :step t67 :args ((smt__a Idv) (:= smt__a smt__a) (smt__b Idv) (:= smt__b smt__b) (smt__f Idv) (:= smt__f smt__f)))
(step t67.t0 (cl (= (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)))) :rule refl)
(step t67.t1 (cl (= (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__f))) :rule refl)
(step t67.t2 (cl (= (= (smt__TLA______FunDom smt__f) smt__a) (= smt__a (smt__TLA______FunDom smt__f)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunDom smt__f) smt__a))
(step t67.t3 (cl (= (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))) :rule cong :premises (t67.t1 t67.t2))
(step t67.t4 (cl (= (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a))) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule cong :premises (t67.t0 t67.t3))
(step t67 (cl (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) :rule bind)
(step t68 (cl (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) :rule all_simplify)
(step t69 (cl (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) :rule trans :premises (t67 t68))
(step t70 (cl (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule resolution :premises (t66 t69 FunSetElim1))
(step t71 (cl (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule resolution :premises (t65 t70))
(step t72 (cl (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule resolution :premises (t61 t63 t71))
(step t73 (cl (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule resolution :premises (t59 t72))
(step t74 (cl (= (smt__TLA______FunDom smt__VARIABLE___alloc___) smt__CONSTANT___Client___)) :rule symm :premises (t73))
(step t75 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule cong :premises (t37 t74))
(step t76 (cl (= (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) true) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule equiv_simplify)
(step t77 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) true) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule equiv2 :premises (t76))
(step t78 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) true)) :rule resolution :premises (t77 a23))
(step t79 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true)) :rule trans :premises (t75 t78))
(step t80 (cl (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule resolution :premises (t57 t79))
(step t81 (cl (not (= (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))))) (not (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule equiv_pos2)
(step t82 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule refl)
(step t83 (cl (= (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule refl)
(step t84 (cl (= (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule refl)
(step t85 (cl (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule refl)
(step t86 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))
(step t87 (cl (= (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule cong :premises (t85 t86))
(step t88 (cl (= (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule cong :premises (t84 t87))
(step t89 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule cong :premises (t83 t88))
(step t90 (cl (= (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))))) :rule cong :premises (t82 t89))
(step t91 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule implies_neg1)
(anchor :step t92)
(assume t92.a0 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))
(step t92.t0 (cl (or (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule forall_inst :args ((:= smt__f smt__VARIABLE___alloc___) (:= smt__x smt__CONSTANT___clt___) (:= smt__y (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) (:= smt__z smt__CONSTANT___c2___)))
(step t92.t1 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule or :premises (t92.t0))
(step t92.t2 (cl (not (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule equiv_pos2)
(anchor :step t92.t3 :args ((smt__f Idv) (:= smt__f smt__f) (smt__x Idv) (:= smt__x smt__x) (smt__y Idv) (:= smt__y smt__y) (smt__z Idv) (:= smt__z smt__z)))
(step t92.t3.t0 (cl (= (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)))) :rule refl)
(step t92.t3.t1 (cl (= (= smt__z smt__x) (= smt__x smt__z))) :rule rare_rewrite :args ("eq-symm" smt__z smt__x))
(step t92.t3.t2 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y))
(step t92.t3.t3 (cl (= (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))) :rule cong :premises (t92.t3.t1 t92.t3.t2))
(step t92.t3.t4 (cl (= (distinct smt__z smt__x) (not (= smt__z smt__x)))) :rule rare_rewrite :args ("distinct-binary-elim" smt__z smt__x))
(step t92.t3.t5 (cl (= (not (= smt__z smt__x)) (not (= smt__x smt__z)))) :rule cong :premises (t92.t3.t1))
(step t92.t3.t6 (cl (= (distinct smt__z smt__x) (not (= smt__x smt__z)))) :rule trans :premises (t92.t3.t4 t92.t3.t5))
(step t92.t3.t7 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) :rule refl)
(step t92.t3.t8 (cl (= (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule cong :premises (t92.t3.t6 t92.t3.t7))
(step t92.t3.t9 (cl (= (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) :rule cong :premises (t92.t3.t3 t92.t3.t8))
(step t92.t3.t10 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule cong :premises (t92.t3.t0 t92.t3.t9))
(step t92.t3 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule bind)
(step t92.t4 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule all_simplify)
(step t92.t5 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule trans :premises (t92.t3 t92.t4))
(step t92.t6 (cl (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule resolution :premises (t92.t2 t92.t5 FunExceptAppDef2))
(step t92.t7 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule resolution :premises (t92.t1 t92.t6))
(step t92 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule subproof :discharge (t92.a0))
(step t93 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule resolution :premises (t91 t92))
(step t94 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule implies_neg2)
(step t95 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule resolution :premises (t93 t94))
(step t96 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule contraction :premises (t95))
(step t97 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule resolution :premises (t81 t90 t96))
(step t98 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule implies :premises (t97))
(step t99 (cl (not (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule equiv_pos2)
(anchor :step t100 :args ((smt__f Idv) (:= smt__f smt__f) (smt__x Idv) (:= smt__x smt__x) (smt__y Idv) (:= smt__y smt__y) (smt__z Idv) (:= smt__z smt__z)))
(step t100.t0 (cl (= (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)))) :rule refl)
(step t100.t1 (cl (= (= smt__z smt__x) (= smt__x smt__z))) :rule rare_rewrite :args ("eq-symm" smt__z smt__x))
(step t100.t2 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y))
(step t100.t3 (cl (= (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))) :rule cong :premises (t100.t1 t100.t2))
(step t100.t4 (cl (= (distinct smt__z smt__x) (not (= smt__z smt__x)))) :rule rare_rewrite :args ("distinct-binary-elim" smt__z smt__x))
(step t100.t5 (cl (= (not (= smt__z smt__x)) (not (= smt__x smt__z)))) :rule cong :premises (t100.t1))
(step t100.t6 (cl (= (distinct smt__z smt__x) (not (= smt__x smt__z)))) :rule trans :premises (t100.t4 t100.t5))
(step t100.t7 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) :rule refl)
(step t100.t8 (cl (= (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule cong :premises (t100.t6 t100.t7))
(step t100.t9 (cl (= (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) :rule cong :premises (t100.t3 t100.t8))
(step t100.t10 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule cong :premises (t100.t0 t100.t9))
(step t100 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule bind)
(step t101 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule all_simplify)
(step t102 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule trans :premises (t100 t101))
(step t103 (cl (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule resolution :premises (t99 t102 FunExceptAppDef2))
(step t104 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule resolution :premises (t98 t103))
(step t105 (cl (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule resolution :premises (t55 t80 t104))
(step t106 (cl (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule resolution :premises (t53 t105))
(step t107 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) :rule resolution :premises (t16 t51 t106))
(step t108 (cl (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule equiv_pos1)
(step t109 (cl (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) :rule reordering :premises (t108))
(step t110 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) :rule forall_inst :args ((:= smt__x (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)) (:= smt__y (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))
(step t111 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule or :premises (t110))
(step t112 (cl (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule resolution :premises (t111 |ExtTrigEqDef Idv|))
(step t113 (cl (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule resolution :premises (t109 Goal t112))
(step t114 (cl (not (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))) (not (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) :rule equiv_pos2)
(step t115 (cl (not (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (not (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))))) :rule reordering :premises (t114))
(step t116 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))))) :rule forall_inst :args ((:= smt__x smt__VARIABLE___alloc______prime) (:= smt__y (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))))
(step t117 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))) :rule or :premises (t116))
(step t118 (cl (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))) :rule resolution :premises (t117 |ExtTrigEqDef Idv|))
(step t119 (cl (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) :rule resolution :premises (t115 a26 t118))
(step t120 (cl) :rule resolution :premises (t14 t107 t113 t119))
(step t121 (cl (not false)) :rule false)
(step t122 (cl) :rule resolution :premises (t120 t121))

