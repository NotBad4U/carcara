(assume a0 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (= (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (= smt__x smt__y)) :pattern ((smt__TLA______SetExtTrigger smt__x smt__y)))))
(assume a1 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (=> (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (smt__TLA______SubsetEq smt__x smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y)))))
(assume a2 (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (! (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)))))
(assume a3 (forall ((smt__a Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Subset smt__a)) (smt__TLA______SubsetEq smt__x smt__a)) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Subset smt__a))) :pattern ((smt__TLA______SubsetEq smt__x smt__a) (smt__TLA______Subset smt__a)))))
(assume a4 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b))) :pattern ((smt__TLA______Mem smt__x smt__a) (smt__TLA______Cap smt__a smt__b)) :pattern ((smt__TLA______Mem smt__x smt__b) (smt__TLA______Cap smt__a smt__b)))))
(assume a5 (forall ((smt__f Idv) (smt__g Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g) (= (smt__TLA______FunDom smt__f) (smt__TLA______FunDom smt__g)) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp smt__f smt__x) (smt__TLA______FunApp smt__g smt__x))))) (= smt__f smt__g)) :pattern ((smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g)))))
(assume a6 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b)))) (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))))))
(assume a7 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (! (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a))) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))))))
(assume a8 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv) (smt__x Idv)) (! (=> (and (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__x smt__a)) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b)) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__x smt__a)) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______FunApp smt__f smt__x)))))
(assume a9 (forall ((smt__x Idv) (smt__y Idv)) (! (smt__TLA______SetExtTrigger (smt__TLA______Cap smt__x smt__y) smt__TLA______SetEnum___0) :pattern ((smt__TLA______Cap smt__x smt__y)))))
(assume a10 (forall ((smt__x Idv)) (! (not (smt__TLA______Mem smt__x smt__TLA______SetEnum___0)) :pattern ((smt__TLA______Mem smt__x smt__TLA______SetEnum___0)))))
(assume a11 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(assume a12 (smt__TLA______Mem smt__CONSTANT___clt___ smt__CONSTANT___Client___))
(assume a13 (smt__TLA______Mem smt__CONSTANT___S___ (smt__TLA______Subset smt__CONSTANT___Resource___)))
(assume a14 (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))
(assume a15 (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))
(assume a16 (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___))
(assume a17 (and (and (smt__TLA______Mem smt__VARIABLE___unsat___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))) (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))))) (= (smt__ACTION___Allocate___ smt__CONSTANT___clt___ smt__CONSTANT___S___) smt__TLA______Tt___Idv)))
(assume a18 (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))
(assume a19 (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))
(assume a20 (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))
(assume a21 (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))
(step t1 (cl (=> (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) :rule implies_neg1)
(anchor :step t2)
(assume t2.a0 (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))
(step t2.t1 (cl (or (not (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule forall_inst :args ((:= smt__CONSTANT___c1____1 smt__CONSTANT___c1___) (:= smt__CONSTANT___c2____1 smt__CONSTANT___c2___) (:= BOUND_VARIABLE_5130 smt__CONSTANT___r___)))
(step t2.t2 (cl (not (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule or :premises (t2.t1))
(step t2.t3 (cl (not (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) (not (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) :rule equiv_pos2)
(anchor :step t2.t4 :args ((smt__CONSTANT___c1____1 Idv) (:= smt__CONSTANT___c1____1 smt__CONSTANT___c1____1) (smt__CONSTANT___c2____1 Idv) (:= smt__CONSTANT___c2____1 smt__CONSTANT___c2____1)))
(step t2.t4.t1 (cl (= smt__CONSTANT___c1____1 smt__CONSTANT___c1____1)) :rule refl)
(step t2.t4.t2 (cl (= smt__CONSTANT___c2____1 smt__CONSTANT___c2____1)) :rule refl)
(step t2.t4.t3 (cl (= (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)))) :rule refl)
(step t2.t4.t4 (cl (= (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))))) :rule all_simplify)
(step t2.t4.t5 (cl (= (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) :rule all_simplify)
(step t2.t4.t6 (cl (= (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) :rule trans :premises (t2.t4.t4 t2.t4.t5))
(step t2.t4.t7 (cl (= (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))))) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))))) :rule cong :premises (t2.t4.t3 t2.t4.t6))
(step t2.t4 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))))) :rule bind)
(step t2.t5 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))))) :rule all_simplify)
(step t2.t6 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (or (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) :rule all_simplify)
(anchor :step t2.t7 :args ((smt__CONSTANT___c1____1 Idv) (:= smt__CONSTANT___c1____1 smt__CONSTANT___c1____1) (smt__CONSTANT___c2____1 Idv) (:= smt__CONSTANT___c2____1 smt__CONSTANT___c2____1) (BOUND_VARIABLE_5130 Idv) (:= BOUND_VARIABLE_5130 BOUND_VARIABLE_5130)))
(step t2.t7.t1 (cl (= smt__CONSTANT___c1____1 smt__CONSTANT___c1____1)) :rule refl)
(step t2.t7.t2 (cl (= smt__CONSTANT___c2____1 smt__CONSTANT___c2____1)) :rule refl)
(step t2.t7.t3 (cl (= BOUND_VARIABLE_5130 BOUND_VARIABLE_5130)) :rule refl)
(step t2.t7.t4 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (or (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (rare-list (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))) rare-list))
(step t2.t7 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (or (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) :rule bind)
(step t2.t8 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) :rule trans :premises (t2.t6 t2.t7))
(step t2.t9 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) :rule trans :premises (t2.t5 t2.t8))
(step t2.t10 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) :rule trans :premises (t2.t4 t2.t9))
(step t2.t11 (cl (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))))))) :rule and :premises (a17))
(step t2.t12 (cl (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) :rule resolution :premises (t2.t3 t2.t10 t2.t11))
(step t2.t13 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule resolution :premises (t2.t2 t2.t12))
(step t2 (cl (not (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule subproof :discharge (t2.a0))
(step t3 (cl (=> (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule resolution :premises (t1 t2))
(step t4 (cl (=> (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule implies_neg2)
(step t5 (cl (=> (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule resolution :premises (t3 t4))
(step t6 (cl (=> (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule contraction :premises (t5))
(step t7 (cl (not (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule implies :premises (t6))
(step t8 (cl (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) :rule or_pos)
(step t9 (cl (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule reordering :premises (t8))
(step t10 (cl (= (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) true) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) :rule equiv_simplify)
(step t11 (cl (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) true)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule equiv1 :premises (t10))
(step t12 (cl (= smt__CONSTANT___r___ smt__CONSTANT___r___)) :rule refl)
(step t13 (cl (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (not (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule equiv_pos2)
(step t14 (cl (not (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule reordering :premises (t13))
(step t15 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule forall_inst :args ((:= smt__x (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (:= smt__y (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))
(step t16 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule or :premises (t15))
(step t17 (cl (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule resolution :premises (t16 a11))
(step t18 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule resolution :premises (t14 a19 t17))
(step t19 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) :rule symm :premises (t18))
(step t20 (cl (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (not (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule equiv_pos2)
(step t21 (cl (not (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) :rule reordering :premises (t20))
(step t22 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) :rule forall_inst :args ((:= smt__x (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)) (:= smt__y (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))
(step t23 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule or :premises (t22))
(step t24 (cl (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule resolution :premises (t23 a11))
(step t25 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule resolution :premises (t21 a20 t24))
(step t26 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) :rule symm :premises (t25))
(step t27 (cl (= (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) :rule cong :premises (t19 t26))
(step t28 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule cong :premises (t12 t27))
(step t29 (cl (= (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) true) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule equiv_simplify)
(step t30 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) true) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule equiv2 :premises (t29))
(step t31 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) true)) :rule resolution :premises (t30 a18))
(step t32 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) true)) :rule trans :premises (t28 t31))
(step t33 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule resolution :premises (t11 t32))
(step t34 (cl (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule resolution :premises (t9 a21 a14 a15 a16 t33))
(step t35 (cl (not (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) (not (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) :rule equiv_pos2)
(anchor :step t36 :args ((smt__CONSTANT___c1____1 Idv) (:= smt__CONSTANT___c1____1 smt__CONSTANT___c1____1) (smt__CONSTANT___c2____1 Idv) (:= smt__CONSTANT___c2____1 smt__CONSTANT___c2____1)))
(step t36.t1 (cl (= smt__CONSTANT___c1____1 smt__CONSTANT___c1____1)) :rule refl)
(step t36.t2 (cl (= smt__CONSTANT___c2____1 smt__CONSTANT___c2____1)) :rule refl)
(step t36.t3 (cl (= (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)))) :rule refl)
(step t36.t4 (cl (= (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))))) :rule all_simplify)
(step t36.t5 (cl (= (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) :rule all_simplify)
(step t36.t6 (cl (= (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) :rule trans :premises (t36.t4 t36.t5))
(step t36.t7 (cl (= (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))))) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))))) :rule cong :premises (t36.t3 t36.t6))
(step t36 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))))) :rule bind)
(step t37 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))))) :rule all_simplify)
(step t38 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (or (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) :rule all_simplify)
(anchor :step t39 :args ((smt__CONSTANT___c1____1 Idv) (:= smt__CONSTANT___c1____1 smt__CONSTANT___c1____1) (smt__CONSTANT___c2____1 Idv) (:= smt__CONSTANT___c2____1 smt__CONSTANT___c2____1) (BOUND_VARIABLE_5130 Idv) (:= BOUND_VARIABLE_5130 BOUND_VARIABLE_5130)))
(step t39.t1 (cl (= smt__CONSTANT___c1____1 smt__CONSTANT___c1____1)) :rule refl)
(step t39.t2 (cl (= smt__CONSTANT___c2____1 smt__CONSTANT___c2____1)) :rule refl)
(step t39.t3 (cl (= BOUND_VARIABLE_5130 BOUND_VARIABLE_5130)) :rule refl)
(step t39.t4 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (or (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (rare-list (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))) rare-list))
(step t39 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (or (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) :rule bind)
(step t40 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) :rule trans :premises (t38 t39))
(step t41 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (forall ((smt__CONSTANT___r____1 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) :rule trans :premises (t37 t40))
(step t42 (cl (= (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1)))))) (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1)))))))) :rule trans :premises (t36 t41))
(step t43 (cl (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r____1 Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r____1 smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r____1 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1))))))) :rule and :premises (a17))
(step t44 (cl (forall ((smt__CONSTANT___c1____1 Idv) (smt__CONSTANT___c2____1 Idv) (BOUND_VARIABLE_5130 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1____1 smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2____1 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1____1 smt__CONSTANT___c2____1) (not (smt__TLA______Mem BOUND_VARIABLE_5130 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5130 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1____1) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2____1))))))) :rule resolution :premises (t35 t42 t43))
(step t45 (cl) :rule resolution :premises (t7 t34 t44))

