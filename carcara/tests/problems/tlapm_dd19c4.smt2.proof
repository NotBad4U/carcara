unsat
(assume SetExt (forall ((smt__x Idv) (smt__y Idv)) (=> (forall ((smt__z Idv)) (= (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (= smt__x smt__y))))
(assume SubsetEqIntro (forall ((smt__x Idv) (smt__y Idv)) (=> (forall ((smt__z Idv)) (=> (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (smt__TLA______SubsetEq smt__x smt__y))))
(assume SubsetEqElim (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y))))
(assume SubsetDefAlt (forall ((smt__a Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Subset smt__a)) (smt__TLA______SubsetEq smt__x smt__a))))
(assume CapDef (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))))
(assume FunExt (forall ((smt__f Idv) (smt__g Idv)) (=> (and (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g) (= (smt__TLA______FunDom smt__f) (smt__TLA______FunDom smt__g)) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp smt__f smt__x) (smt__TLA______FunApp smt__g smt__x))))) (= smt__f smt__g))))
(assume FunExceptIsafcn (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (smt__TLA______FunIsafcn (smt__TLA______FunExcept smt__f smt__x smt__y))))
(assume FunExceptDomDef (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (= (smt__TLA______FunDom (smt__TLA______FunExcept smt__f smt__x smt__y)) (smt__TLA______FunDom smt__f))))
(assume FunExceptAppDef1 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__x) smt__y))))
(assume FunExceptAppDef2 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))
(assume DisjointTrigger (forall ((smt__x Idv) (smt__y Idv)) (smt__TLA______SetExtTrigger (smt__TLA______Cap smt__x smt__y) smt__TLA______SetEnum___0)))
(assume |EnumDefElim 0| (forall ((smt__x Idv)) (not (smt__TLA______Mem smt__x smt__TLA______SetEnum___0))))
(assume |ExtTrigEqDef Idv| (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(assume |ExtTrigEqDef Set$Idv$| (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y) (= smt__x smt__y))))
(assume |ExtTrigEqTrigger Idv| (forall ((smt__x Idv) (smt__y Idv)) (smt__TLA______SetExtTrigger smt__x smt__y)))
(assume a15 (smt__TLA______Mem smt__CONSTANT___clt___ smt__CONSTANT___Client___))
(assume a16 (smt__TLA______Mem smt__CONSTANT___S___ (smt__TLA______Subset smt__CONSTANT___Resource___)))
(assume Goal (! (not (=> (! (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (and (and (! (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___) smt__TLA______SetEnum___0) :named @p_6) (! (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__TLA______SetEnum___0) :named @p_5)) (! (and (! (not (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__CONSTANT___S___ smt__TLA______SetEnum___0)) :named @p_3) (! (smt__TLA______TrigEq___Idv smt__VARIABLE___unsat______prime (smt__TLA______FunExcept smt__VARIABLE___unsat___ smt__CONSTANT___clt___ smt__CONSTANT___S___)) :named @p_2)) :named @p_4) (! (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime smt__VARIABLE___alloc___) :named @p_1))) :named @p_7) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))))) :named @p_8))
(step t0 (cl (! (=> (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (! (or (! (not (! (smt__TLA______Mem (! (choice ((smt__CONSTANT___c1___ Idv)) (not (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :named @p_17) smt__CONSTANT___Client___) :named @p_21)) :named @p_22) (! (not (! (smt__TLA______Mem (! (choice ((smt__CONSTANT___c2___ Idv)) (not (forall ((BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem (choice ((smt__CONSTANT___c1___ Idv)) (not (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv (choice ((smt__CONSTANT___c1___ Idv)) (not (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime (choice ((smt__CONSTANT___c1___ Idv)) (not (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :named @p_16) smt__CONSTANT___Client___) :named @p_19)) :named @p_20) (! (smt__TLA______TrigEq___Idv @p_17 @p_16) :named @p_18) (! (not (! (smt__TLA______Mem (! (choice ((BOUND_VARIABLE_5167 Idv)) (not (or (! (not (! (smt__TLA______Mem (! (choice ((smt__CONSTANT___c1___ Idv)) (not (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :named @p_17) smt__CONSTANT___Client___) :named @p_21)) :named @p_22) (! (not (! (smt__TLA______Mem (! (choice ((smt__CONSTANT___c2___ Idv)) (not (forall ((BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem (choice ((smt__CONSTANT___c1___ Idv)) (not (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv (choice ((smt__CONSTANT___c1___ Idv)) (not (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime (choice ((smt__CONSTANT___c1___ Idv)) (not (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :named @p_16) smt__CONSTANT___Client___) :named @p_19)) :named @p_20) (! (smt__TLA______TrigEq___Idv @p_17 @p_16) :named @p_18) (! (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) :named @p_10) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime @p_17) (smt__TLA______FunApp smt__VARIABLE___alloc______prime @p_16))))))) :named @p_23) smt__CONSTANT___Resource___) :named @p_25)) :named @p_26) (not (! (smt__TLA______Mem @p_23 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ @p_17) (smt__TLA______FunApp smt__VARIABLE___alloc___ @p_16))) :named @p_24))) :named @p_27)) :named @p_46) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule implies_neg1)
(anchor :step t1)
(assume t1.a0 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))
(step t1.t0 (cl (or (! (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :named @p_45) @p_27)) :rule forall_inst :args ((:= smt__CONSTANT___c1___ @p_17) (:= smt__CONSTANT___c2___ @p_16) (:= BOUND_VARIABLE_5138 @p_23)))
(step t1.t1 (cl @p_45 @p_27) :rule or :premises (t1.t0))
(step t1.t2 (cl (not (= @p_8 (not (=> (! (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) @p_6 @p_5 @p_3 @p_2 @p_1) :named @p_9) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) (not @p_8) (not (=> (! (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) @p_6 @p_5 @p_3 @p_2 @p_1) :named @p_9) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule equiv_pos2)
(step t1.t3 (cl (= @p_7 (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (and @p_6 @p_5) @p_4 @p_1))) :rule rare_rewrite :args ("bool-and-flatten" (rare-list (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))) (and @p_6 @p_5) (rare-list @p_4 @p_1) rare-list))
(step t1.t4 (cl (= (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (and @p_6 @p_5) @p_4 @p_1) (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) @p_6 @p_5 @p_4 @p_1))) :rule rare_rewrite :args ("bool-and-flatten" (rare-list (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))) @p_6 (rare-list @p_5) (rare-list @p_4 @p_1)))
(step t1.t5 (cl (= (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) @p_6 @p_5 @p_4 @p_1) (! (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) @p_6 @p_5 @p_3 @p_2 @p_1) :named @p_13))) :rule rare_rewrite :args ("bool-and-flatten" (rare-list (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) @p_6 @p_5) @p_3 (rare-list @p_2) (rare-list @p_1)))
(step t1.t6 (cl (= (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (and @p_6 @p_5) @p_4 @p_1) @p_13)) :rule trans :premises (t1.t4 t1.t5))
(step t1.t7 (cl (= @p_7 @p_13)) :rule trans :premises (t1.t3 t1.t6))
(anchor :step t1.t8 :args ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___)))
(step t1.t8.t0 (cl (= (! (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) :named @p_15) @p_15)) :rule refl)
(step t1.t8.t1 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) :rule all_simplify)
(step t1.t8.t2 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))) (or (! (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) :named @p_14) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) :rule all_simplify)
(step t1.t8.t3 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (or @p_14 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) :rule trans :premises (t1.t8.t1 t1.t8.t2))
(step t1.t8.t4 (cl (= (=> @p_15 (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) (=> @p_15 (or @p_14 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))))) :rule cong :premises (t1.t8.t0 t1.t8.t3))
(step t1.t8 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))))) :rule bind)
(step t1.t9 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))))) :rule all_simplify)
(step t1.t10 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) :rule all_simplify)
(anchor :step t1.t11 :args ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___) (:= BOUND_VARIABLE_5138 BOUND_VARIABLE_5138)))
(step t1.t11.t0 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_14 (or (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_14 (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_14) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (rare-list (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) rare-list))
(step t1.t11 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) :rule bind)
(step t1.t12 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) :rule trans :premises (t1.t10 t1.t11))
(step t1.t13 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) :rule trans :premises (t1.t9 t1.t12))
(step t1.t14 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) :rule trans :premises (t1.t8 t1.t13))
(step t1.t15 (cl (= @p_6 @p_6)) :rule refl)
(step t1.t16 (cl (= @p_5 @p_5)) :rule refl)
(step t1.t17 (cl (= @p_3 @p_3)) :rule refl)
(step t1.t18 (cl (= @p_2 @p_2)) :rule refl)
(step t1.t19 (cl (= @p_1 @p_1)) :rule refl)
(step t1.t20 (cl (= @p_13 @p_9)) :rule cong :premises (t1.t14 t1.t15 t1.t16 t1.t17 t1.t18 t1.t19))
(step t1.t21 (cl (= @p_7 @p_9)) :rule trans :premises (t1.t7 t1.t20))
(anchor :step t1.t22 :args ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___)))
(step t1.t22.t0 (cl (= (! (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) :named @p_12) @p_12)) :rule refl)
(step t1.t22.t1 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) :rule all_simplify)
(step t1.t22.t2 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))) (or (! (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) :named @p_11) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule all_simplify)
(step t1.t22.t3 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (or @p_11 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule trans :premises (t1.t22.t1 t1.t22.t2))
(step t1.t22.t4 (cl (= (=> @p_12 (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) (=> @p_12 (or @p_11 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule cong :premises (t1.t22.t0 t1.t22.t3))
(step t1.t22 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))))) :rule bind)
(step t1.t23 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule all_simplify)
(step t1.t24 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule all_simplify)
(anchor :step t1.t25 :args ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___) (:= BOUND_VARIABLE_5167 BOUND_VARIABLE_5167)))
(step t1.t25.t0 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_11 (or @p_10 (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_11 @p_10 (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_11) @p_10 (rare-list (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) rare-list))
(step t1.t25 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule bind)
(step t1.t26 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t1.t24 t1.t25))
(step t1.t27 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t1.t23 t1.t26))
(step t1.t28 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t1.t22 t1.t27))
(step t1.t29 (cl (= (=> @p_7 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))) (=> @p_9 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule cong :premises (t1.t21 t1.t28))
(step t1.t30 (cl (= @p_8 (not (=> @p_9 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule cong :premises (t1.t29))
(step t1.t31 (cl (not (=> @p_9 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule resolution :premises (t1.t2 t1.t30 Goal))
(step t1.t32 (cl @p_9) :rule not_implies1 :premises (t1.t31))
(step t1.t33 (cl (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule and :premises (t1.t32))
(step t1.t34 (cl @p_27) :rule resolution :premises (t1.t1 t1.t33))
(step t1 (cl @p_45 @p_27) :rule subproof :discharge (t1.a0))
(step t2 (cl @p_46 @p_27) :rule resolution :premises (t0 t1))
(step t3 (cl @p_46 (! (not @p_27) :named @p_28)) :rule implies_neg2)
(step t4 (cl @p_46 @p_46) :rule resolution :premises (t2 t3))
(step t5 (cl @p_46) :rule contraction :premises (t4))
(step t6 (cl @p_45 @p_27) :rule implies :premises (t5))
(step t7 (cl @p_28 @p_22 @p_20 @p_18 @p_26 (not @p_24)) :rule or_pos)
(step t8 (cl @p_22 @p_20 @p_18 @p_26 (not @p_24) @p_28) :rule reordering :premises (t7))
(step t9 (cl (not (= (! (or (! (or @p_22 @p_20 @p_18 @p_26 (not (! (smt__TLA______Mem @p_23 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime @p_17) (smt__TLA______FunApp smt__VARIABLE___alloc______prime @p_16))) :named @p_29))) :named @p_30) (! (not @p_22) :named @p_43)) :named @p_44) (or @p_30 @p_21))) (not @p_44) (or @p_30 @p_21)) :rule equiv_pos2)
(step t10 (cl (= @p_30 @p_30)) :rule refl)
(step t11 (cl (= @p_43 @p_21)) :rule rare_rewrite :args ("bool-double-not-elim" @p_21))
(step t12 (cl (= @p_44 (or @p_30 @p_21))) :rule cong :premises (t10 t11))
(step t13 (cl @p_30 @p_43) :rule or_neg)
(step t14 (cl @p_44 (! (not @p_30) :named @p_31)) :rule or_neg)
(step t15 (cl @p_44 (not @p_43)) :rule or_neg)
(step t16 (cl @p_44 @p_44) :rule resolution :premises (t13 t14 t15))
(step t17 (cl @p_44) :rule contraction :premises (t16))
(step t18 (cl (or @p_30 @p_21)) :rule resolution :premises (t9 t12 t17))
(step t19 (cl @p_30 @p_21) :rule or :premises (t18))
(step t20 (cl @p_21 @p_30) :rule reordering :premises (t19))
(step t21 (cl (not (= (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) @p_31)) (not (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) @p_31) :rule equiv_pos2)
(anchor :step t22 :args ((:= smt__CONSTANT___c1___ @p_17) (:= smt__CONSTANT___c2___ @p_16) (:= BOUND_VARIABLE_5167 @p_23)))
(step t22.t0 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_11 @p_10 (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) @p_30)) :rule refl)
(step t22 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) @p_30)) :rule sko_forall)
(step t23 (cl (= (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) @p_31)) :rule cong :premises (t22))
(step t24 (cl (not (= @p_8 (not (=> @p_9 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) (not @p_8) (not (=> @p_9 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule equiv_pos2)
(step t25 (cl (= @p_7 (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (and @p_6 @p_5) @p_4 @p_1))) :rule rare_rewrite :args ("bool-and-flatten" (rare-list (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))) (and @p_6 @p_5) (rare-list @p_4 @p_1) rare-list))
(step t26 (cl (= (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (and @p_6 @p_5) @p_4 @p_1) (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) @p_6 @p_5 @p_4 @p_1))) :rule rare_rewrite :args ("bool-and-flatten" (rare-list (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))) @p_6 (rare-list @p_5) (rare-list @p_4 @p_1)))
(step t27 (cl (= (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) @p_6 @p_5 @p_4 @p_1) @p_13)) :rule rare_rewrite :args ("bool-and-flatten" (rare-list (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) @p_6 @p_5) @p_3 (rare-list @p_2) (rare-list @p_1)))
(step t28 (cl (= (and (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (and @p_6 @p_5) @p_4 @p_1) @p_13)) :rule trans :premises (t26 t27))
(step t29 (cl (= @p_7 @p_13)) :rule trans :premises (t25 t28))
(anchor :step t30 :args ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___)))
(step t30.t0 (cl (= @p_15 @p_15)) :rule refl)
(step t30.t1 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) :rule all_simplify)
(step t30.t2 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))) (or @p_14 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) :rule all_simplify)
(step t30.t3 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (or @p_14 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) :rule trans :premises (t30.t1 t30.t2))
(step t30.t4 (cl (= (=> @p_15 (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) (=> @p_15 (or @p_14 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))))) :rule cong :premises (t30.t0 t30.t3))
(step t30 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))))) :rule bind)
(step t31 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))))) :rule all_simplify)
(step t32 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) :rule all_simplify)
(anchor :step t33 :args ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___) (:= BOUND_VARIABLE_5138 BOUND_VARIABLE_5138)))
(step t33.t0 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_14 (or (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_14 (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_14) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (rare-list (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) rare-list))
(step t33 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) :rule bind)
(step t34 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) :rule trans :premises (t32 t33))
(step t35 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) :rule trans :premises (t31 t34))
(step t36 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))))) :rule trans :premises (t30 t35))
(step t37 (cl (= @p_6 @p_6)) :rule refl)
(step t38 (cl (= @p_5 @p_5)) :rule refl)
(step t39 (cl (= @p_3 @p_3)) :rule refl)
(step t40 (cl (= @p_2 @p_2)) :rule refl)
(step t41 (cl (= @p_1 @p_1)) :rule refl)
(step t42 (cl (= @p_13 @p_9)) :rule cong :premises (t36 t37 t38 t39 t40 t41))
(step t43 (cl (= @p_7 @p_9)) :rule trans :premises (t29 t42))
(anchor :step t44 :args ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___)))
(step t44.t0 (cl (= @p_12 @p_12)) :rule refl)
(step t44.t1 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) :rule all_simplify)
(step t44.t2 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))) (or @p_11 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule all_simplify)
(step t44.t3 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (or @p_11 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule trans :premises (t44.t1 t44.t2))
(step t44.t4 (cl (= (=> @p_12 (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) (=> @p_12 (or @p_11 (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule cong :premises (t44.t0 t44.t3))
(step t44 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))))) :rule bind)
(step t45 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule all_simplify)
(step t46 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule all_simplify)
(anchor :step t47 :args ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___) (:= BOUND_VARIABLE_5167 BOUND_VARIABLE_5167)))
(step t47.t0 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_11 (or @p_10 (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_11 @p_10 (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) @p_11) @p_10 (rare-list (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) rare-list))
(step t47 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule bind)
(step t48 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t46 t47))
(step t49 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t45 t48))
(step t50 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t44 t49))
(step t51 (cl (= (=> @p_7 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))) (=> @p_9 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule cong :premises (t43 t50))
(step t52 (cl (= @p_8 (not (=> @p_9 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule cong :premises (t51))
(step t53 (cl (not (=> @p_9 (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule resolution :premises (t24 t52 Goal))
(step t54 (cl (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5167 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5167 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5167 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule not_implies2 :premises (t53))
(step t55 (cl @p_31) :rule resolution :premises (t21 t23 t54))
(step t56 (cl @p_21) :rule resolution :premises (t20 t55))
(step t57 (cl (not (= (! (or @p_30 (! (not @p_20) :named @p_41)) :named @p_42) (or @p_30 @p_19))) (not @p_42) (or @p_30 @p_19)) :rule equiv_pos2)
(step t58 (cl (= @p_41 @p_19)) :rule rare_rewrite :args ("bool-double-not-elim" @p_19))
(step t59 (cl (= @p_42 (or @p_30 @p_19))) :rule cong :premises (t10 t58))
(step t60 (cl @p_30 @p_41) :rule or_neg)
(step t61 (cl @p_42 @p_31) :rule or_neg)
(step t62 (cl @p_42 (not @p_41)) :rule or_neg)
(step t63 (cl @p_42 @p_42) :rule resolution :premises (t60 t61 t62))
(step t64 (cl @p_42) :rule contraction :premises (t63))
(step t65 (cl (or @p_30 @p_19)) :rule resolution :premises (t57 t59 t64))
(step t66 (cl @p_30 @p_19) :rule or :premises (t65))
(step t67 (cl @p_19 @p_30) :rule reordering :premises (t66))
(step t68 (cl @p_19) :rule resolution :premises (t67 t55))
(step t69 (cl @p_30 (not @p_18)) :rule or_neg)
(step t70 (cl (not @p_18)) :rule resolution :premises (t69 t55))
(step t71 (cl (not (= (! (or @p_30 (! (not @p_26) :named @p_39)) :named @p_40) (or @p_30 @p_25))) (not @p_40) (or @p_30 @p_25)) :rule equiv_pos2)
(step t72 (cl (= @p_39 @p_25)) :rule rare_rewrite :args ("bool-double-not-elim" @p_25))
(step t73 (cl (= @p_40 (or @p_30 @p_25))) :rule cong :premises (t10 t72))
(step t74 (cl @p_30 @p_39) :rule or_neg)
(step t75 (cl @p_40 @p_31) :rule or_neg)
(step t76 (cl @p_40 (not @p_39)) :rule or_neg)
(step t77 (cl @p_40 @p_40) :rule resolution :premises (t74 t75 t76))
(step t78 (cl @p_40) :rule contraction :premises (t77))
(step t79 (cl (or @p_30 @p_25)) :rule resolution :premises (t71 t73 t78))
(step t80 (cl @p_30 @p_25) :rule or :premises (t79))
(step t81 (cl @p_25 @p_30) :rule reordering :premises (t80))
(step t82 (cl @p_25) :rule resolution :premises (t81 t55))
(step t83 (cl (= (= @p_24 true) @p_24)) :rule equiv_simplify)
(step t84 (cl (not (= @p_24 true)) @p_24) :rule equiv1 :premises (t83))
(step t85 (cl (= @p_23 @p_23)) :rule refl)
(step t86 (cl (not (! (= @p_1 (! (= smt__VARIABLE___alloc___ smt__VARIABLE___alloc______prime) :named @p_34)) :named @p_35)) (not @p_1) @p_34) :rule equiv_pos2)
(step t87 (cl (not @p_1) @p_34 (not @p_35)) :rule reordering :premises (t86))
(step t88 (cl @p_9) :rule not_implies1 :premises (t53))
(step t89 (cl @p_1) :rule and :premises (t88))
(step t90 (cl (not (= (! (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (! (= @p_1 (= smt__VARIABLE___alloc______prime smt__VARIABLE___alloc___)) :named @p_37)) :named @p_38) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) @p_35))) (not @p_38) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) @p_35)) :rule equiv_pos2)
(step t91 (cl (= (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))) :rule refl)
(step t92 (cl (= (= smt__VARIABLE___alloc______prime smt__VARIABLE___alloc___) @p_34)) :rule rare_rewrite :args ("eq-symm" smt__VARIABLE___alloc______prime smt__VARIABLE___alloc___))
(step t93 (cl (= @p_37 @p_35)) :rule cong :premises (t41 t92))
(step t94 (cl (= @p_38 (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) @p_35))) :rule cong :premises (t91 t93))
(step t95 (cl @p_38 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) :rule implies_neg1)
(anchor :step t96)
(assume t96.a0 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(step t96.t0 (cl (or (! (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) :named @p_36) @p_37)) :rule forall_inst :args ((:= smt__x smt__VARIABLE___alloc______prime) (:= smt__y smt__VARIABLE___alloc___)))
(step t96.t1 (cl @p_36 @p_37) :rule or :premises (t96.t0))
(step t96.t2 (cl @p_37) :rule resolution :premises (t96.t1 t96.a0))
(step t96 (cl @p_36 @p_37) :rule subproof :discharge (t96.a0))
(step t97 (cl @p_38 @p_37) :rule resolution :premises (t95 t96))
(step t98 (cl @p_38 (not @p_37)) :rule implies_neg2)
(step t99 (cl @p_38 @p_38) :rule resolution :premises (t97 t98))
(step t100 (cl @p_38) :rule contraction :premises (t99))
(step t101 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) @p_35)) :rule resolution :premises (t90 t94 t100))
(step t102 (cl @p_36 @p_35) :rule implies :premises (t101))
(step t103 (cl @p_35) :rule resolution :premises (t102 |ExtTrigEqDef Idv|))
(step t104 (cl @p_34) :rule resolution :premises (t87 t89 t103))
(step t105 (cl (= @p_17 @p_17)) :rule refl)
(step t106 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc___ @p_17) (smt__TLA______FunApp smt__VARIABLE___alloc______prime @p_17))) :rule cong :premises (t104 t105))
(step t107 (cl (= @p_16 @p_16)) :rule refl)
(step t108 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc___ @p_16) (smt__TLA______FunApp smt__VARIABLE___alloc______prime @p_16))) :rule cong :premises (t104 t107))
(step t109 (cl (= (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ @p_17) (smt__TLA______FunApp smt__VARIABLE___alloc___ @p_16)) (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime @p_17) (smt__TLA______FunApp smt__VARIABLE___alloc______prime @p_16)))) :rule cong :premises (t106 t108))
(step t110 (cl (= @p_24 @p_29)) :rule cong :premises (t85 t109))
(step t111 (cl (= (= @p_29 true) @p_29)) :rule equiv_simplify)
(step t112 (cl (= @p_29 true) (not @p_29)) :rule equiv2 :premises (t111))
(step t113 (cl (not (= (! (or @p_30 (! (not (not @p_29)) :named @p_32)) :named @p_33) (or @p_30 @p_29))) (not @p_33) (or @p_30 @p_29)) :rule equiv_pos2)
(step t114 (cl (= @p_32 @p_29)) :rule rare_rewrite :args ("bool-double-not-elim" @p_29))
(step t115 (cl (= @p_33 (or @p_30 @p_29))) :rule cong :premises (t10 t114))
(step t116 (cl @p_30 @p_32) :rule or_neg)
(step t117 (cl @p_33 @p_31) :rule or_neg)
(step t118 (cl @p_33 (not @p_32)) :rule or_neg)
(step t119 (cl @p_33 @p_33) :rule resolution :premises (t116 t117 t118))
(step t120 (cl @p_33) :rule contraction :premises (t119))
(step t121 (cl (or @p_30 @p_29)) :rule resolution :premises (t113 t115 t120))
(step t122 (cl @p_30 @p_29) :rule or :premises (t121))
(step t123 (cl @p_29 @p_30) :rule reordering :premises (t122))
(step t124 (cl @p_29) :rule resolution :premises (t123 t55))
(step t125 (cl (= @p_29 true)) :rule resolution :premises (t112 t124))
(step t126 (cl (= @p_24 true)) :rule trans :premises (t110 t125))
(step t127 (cl @p_24) :rule resolution :premises (t84 t126))
(step t128 (cl @p_28) :rule resolution :premises (t8 t56 t68 t70 t82 t127))
(step t129 (cl (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5138 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5138 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5138 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule and :premises (t88))
(step t130 (cl) :rule resolution :premises (t6 t128 t129))

