(assume a0 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (= (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (= smt__x smt__y)) :pattern ((smt__TLA______SetExtTrigger smt__x smt__y)))))
(assume a1 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (=> (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (smt__TLA______SubsetEq smt__x smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y)))))
(assume a2 (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (! (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)))))
(assume a3 (forall ((smt__a Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Subset smt__a)) (smt__TLA______SubsetEq smt__x smt__a)) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Subset smt__a))) :pattern ((smt__TLA______SubsetEq smt__x smt__a) (smt__TLA______Subset smt__a)))))
(assume a4 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Cup smt__a smt__b)) (or (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Cup smt__a smt__b))) :pattern ((smt__TLA______Mem smt__x smt__a) (smt__TLA______Cup smt__a smt__b)) :pattern ((smt__TLA______Mem smt__x smt__b) (smt__TLA______Cup smt__a smt__b)))))
(assume a5 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b))) :pattern ((smt__TLA______Mem smt__x smt__a) (smt__TLA______Cap smt__a smt__b)) :pattern ((smt__TLA______Mem smt__x smt__b) (smt__TLA______Cap smt__a smt__b)))))
(assume a6 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b)))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b))) :pattern ((smt__TLA______Mem smt__x smt__a) (smt__TLA______SetMinus smt__a smt__b)) :pattern ((smt__TLA______Mem smt__x smt__b) (smt__TLA______SetMinus smt__a smt__b)))))
(assume a7 (forall ((smt__f Idv) (smt__g Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g) (= (smt__TLA______FunDom smt__f) (smt__TLA______FunDom smt__g)) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp smt__f smt__x) (smt__TLA______FunApp smt__g smt__x))))) (= smt__f smt__g)) :pattern ((smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g)))))
(assume a8 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b)))) (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))))))
(assume a9 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))))
(assume a10 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv) (smt__x Idv)) (! (=> (and (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__x smt__a)) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b)) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__x smt__a)) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______FunApp smt__f smt__x)))))
(assume a11 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (! (smt__TLA______FunIsafcn (smt__TLA______FunExcept smt__f smt__x smt__y)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y)))))
(assume a12 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______FunDom (smt__TLA______FunExcept smt__f smt__x smt__y)) (smt__TLA______FunDom smt__f)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y)))))
(assume a13 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (! (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__x) smt__y)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y)))))
(assume a14 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))
(assume a15 (forall ((smt__x Idv) (smt__y Idv)) (! (smt__TLA______SetExtTrigger (smt__TLA______Cap smt__x smt__y) smt__TLA______SetEnum___0) :pattern ((smt__TLA______Cap smt__x smt__y)))))
(assume a16 (forall ((smt__x Idv)) (! (not (smt__TLA______Mem smt__x smt__TLA______SetEnum___0)) :pattern ((smt__TLA______Mem smt__x smt__TLA______SetEnum___0)))))
(assume a17 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(assume a18 (forall ((smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y) (= smt__x smt__y)) :pattern ((smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y)))))
(assume a19 (forall ((smt__x Idv) (smt__y Idv)) (! (smt__TLA______SetExtTrigger smt__x smt__y) :pattern ((smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y)))))
(assume a20 (smt__TLA______Mem smt__CONSTANT___clt___ smt__CONSTANT___Client___))
(assume a21 (smt__TLA______Mem smt__CONSTANT___S___ (smt__TLA______Subset smt__CONSTANT___Resource___)))
(assume a22 (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))
(assume a23 (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))
(assume a24 (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___))
(assume a25 (and (and (smt__TLA______Mem smt__VARIABLE___unsat___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))) (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv) (and (not (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__CONSTANT___S___ smt__TLA______SetEnum___0)) (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))))
(assume a26 (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))
(assume a27 (smt__TLA______TrigEq___Idv smt__VARIABLE___unsat______prime (smt__TLA______FunExcept smt__VARIABLE___unsat___ smt__CONSTANT___clt___ (smt__TLA______SetMinus (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))
(assume a28 (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))
(assume a29 (not (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___))))
(assume a30 (not (and (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))
(step t1 (cl (not (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (not (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule not_and :premises (a30))
(step t2 (cl (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule equiv_pos1)
(step t3 (cl (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule reordering :premises (t2))
(step t4 (cl (not (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))) (not (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) :rule equiv_pos2)
(step t5 (cl (not (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (not (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))))) :rule reordering :premises (t4))
(step t6 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))))) :rule forall_inst :args ((:= smt__x smt__VARIABLE___alloc______prime) (:= smt__y (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))))
(step t7 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))) :rule or :premises (t6))
(step t8 (cl (= (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))) (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))) :rule resolution :premises (t7 a17))
(step t9 (cl (= smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)))) :rule resolution :premises (t5 a26 t8))
(step t10 (cl (= smt__CONSTANT___c1___ smt__CONSTANT___c1___)) :rule refl)
(step t11 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) :rule cong :premises (t9 t10))
(step t12 (cl (not (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) :rule or_pos)
(step t13 (cl (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)) (not (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))) :rule reordering :premises (t12))
(step t14 (cl (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule equiv_pos1)
(step t15 (cl (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule reordering :premises (t14))
(step t16 (cl (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule not_or :premises (a29))
(step t17 (cl (not (= (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))))) (not (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule equiv_pos2)
(step t18 (cl (= (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))) :rule refl)
(step t19 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule refl)
(step t20 (cl (= (= smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule rare_rewrite :args ("eq-symm" smt__CONSTANT___c1___ smt__CONSTANT___clt___))
(step t21 (cl (= (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule cong :premises (t19 t20))
(step t22 (cl (= (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))))) :rule cong :premises (t18 t21))
(step t23 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) :rule implies_neg1)
(anchor :step t24)
(assume t24.a0 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(step t24.t1 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule forall_inst :args ((:= smt__x smt__CONSTANT___c1___) (:= smt__y smt__CONSTANT___clt___)))
(step t24.t2 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule or :premises (t24.t1))
(step t24.t3 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule resolution :premises (t24.t2 t24.a0))
(step t24 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule subproof :discharge (t24.a0))
(step t25 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) :rule resolution :premises (t23 t24))
(step t26 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule implies_neg2)
(step t27 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule resolution :premises (t25 t26))
(step t28 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___c1___ smt__CONSTANT___clt___)))) :rule contraction :premises (t27))
(step t29 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)))) :rule resolution :premises (t17 t22 t28))
(step t30 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule implies :premises (t29))
(step t31 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule resolution :premises (t30 a17))
(step t32 (cl (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule resolution :premises (t15 t16 t31))
(step t33 (cl (not (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))) :rule and_pos)
(step t34 (cl (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (not (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))))) :rule reordering :premises (t33))
(step t35 (cl (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))))) (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))) :rule or_pos)
(step t36 (cl (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))))) :rule reordering :premises (t35))
(step t37 (cl (= (= (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true) (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule equiv_simplify)
(step t38 (cl (not (= (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true)) (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule equiv1 :premises (t37))
(step t39 (cl (not (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule and_pos)
(step t40 (cl (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) (not (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule reordering :premises (t39))
(step t41 (cl (not (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule or_pos)
(step t42 (cl (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (not (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))))) :rule reordering :premises (t41))
(step t43 (cl (and (smt__TLA______Mem smt__VARIABLE___unsat___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))) (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))))) :rule and :premises (a25))
(step t44 (cl (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) :rule and :premises (t43))
(step t45 (cl (or (not (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))))) :rule forall_inst :args ((:= smt__a smt__CONSTANT___Client___) (:= smt__b (smt__TLA______Subset smt__CONSTANT___Resource___)) (:= smt__f smt__VARIABLE___alloc___)))
(step t46 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule or :premises (t45))
(step t47 (cl (not (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) (not (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a))))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule equiv_pos2)
(anchor :step t48 :args ((smt__a Idv) (:= smt__a smt__a) (smt__b Idv) (:= smt__b smt__b) (smt__f Idv) (:= smt__f smt__f)))
(step t48.t1 (cl (= smt__a smt__a)) :rule refl)
(step t48.t2 (cl (= smt__b smt__b)) :rule refl)
(step t48.t3 (cl (= smt__f smt__f)) :rule refl)
(step t48.t4 (cl (= (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)))) :rule refl)
(step t48.t5 (cl (= (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__f))) :rule refl)
(step t48.t6 (cl (= (= (smt__TLA______FunDom smt__f) smt__a) (= smt__a (smt__TLA______FunDom smt__f)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunDom smt__f) smt__a))
(step t48.t7 (cl (= (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))) :rule cong :premises (t48.t5 t48.t6))
(step t48.t8 (cl (= (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a))) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule cong :premises (t48.t4 t48.t7))
(step t48 (cl (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) :rule bind)
(anchor :step t49 :args ((smt__a Idv) (:= smt__a smt__a) (smt__b Idv) (:= smt__b smt__b) (smt__f Idv) (:= smt__f smt__f)))
(step t49.t1 (cl (= smt__a smt__a)) :rule refl)
(step t49.t2 (cl (= smt__b smt__b)) :rule refl)
(step t49.t3 (cl (= smt__f smt__f)) :rule refl)
(step t49.t4 (cl (= (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule rare_rewrite :args ("bool-impl-elim" (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))
(step t49 (cl (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) :rule bind)
(step t50 (cl (= (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a)))) (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f))))))) :rule trans :premises (t48 t49))
(step t51 (cl (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (or (not (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) (and (smt__TLA______FunIsafcn smt__f) (= smt__a (smt__TLA______FunDom smt__f)))))) :rule resolution :premises (t47 t50 a9))
(step t52 (cl (or (not (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule resolution :premises (t46 t51))
(step t53 (cl (and (smt__TLA______FunIsafcn smt__VARIABLE___alloc___) (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule resolution :premises (t42 t44 t52))
(step t54 (cl (= smt__CONSTANT___Client___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule resolution :premises (t40 t53))
(step t55 (cl (= (smt__TLA______FunDom smt__VARIABLE___alloc___) smt__CONSTANT___Client___)) :rule symm :premises (t54))
(step t56 (cl (= (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))) :rule cong :premises (t10 t55))
(step t57 (cl (= (= (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) true) (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))) :rule equiv_simplify)
(step t58 (cl (= (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) true) (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))) :rule equiv2 :premises (t57))
(step t59 (cl (= (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) true)) :rule resolution :premises (t58 a22))
(step t60 (cl (= (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true)) :rule trans :premises (t56 t59))
(step t61 (cl (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule resolution :premises (t38 t60))
(step t62 (cl (not (= (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))))))) (not (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))))) :rule equiv_pos2)
(step t63 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule refl)
(step t64 (cl (= (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule refl)
(step t65 (cl (= (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))) :rule refl)
(step t66 (cl (= (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= smt__CONSTANT___clt___ smt__CONSTANT___c1___))) :rule refl)
(step t67 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))
(step t68 (cl (= (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))) :rule cong :premises (t66 t67))
(step t69 (cl (= (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))))) :rule cong :premises (t65 t68))
(step t70 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))))) :rule cong :premises (t64 t69))
(step t71 (cl (= (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))))))) :rule cong :premises (t63 t70))
(step t72 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule implies_neg1)
(anchor :step t73)
(assume t73.a0 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))
(step t73.t1 (cl (or (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))))) :rule forall_inst :args ((:= smt__f smt__VARIABLE___alloc___) (:= smt__x smt__CONSTANT___clt___) (:= smt__y (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) (:= smt__z smt__CONSTANT___c1___)))
(step t73.t2 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) :rule or :premises (t73.t1))
(step t73.t3 (cl (not (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule equiv_pos2)
(anchor :step t73.t4 :args ((smt__f Idv) (:= smt__f smt__f) (smt__x Idv) (:= smt__x smt__x) (smt__y Idv) (:= smt__y smt__y) (smt__z Idv) (:= smt__z smt__z)))
(step t73.t4.t1 (cl (= smt__f smt__f)) :rule refl)
(step t73.t4.t2 (cl (= smt__x smt__x)) :rule refl)
(step t73.t4.t3 (cl (= smt__y smt__y)) :rule refl)
(step t73.t4.t4 (cl (= smt__z smt__z)) :rule refl)
(step t73.t4.t5 (cl (= (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)))) :rule refl)
(step t73.t4.t6 (cl (= (= smt__z smt__x) (= smt__x smt__z))) :rule rare_rewrite :args ("eq-symm" smt__z smt__x))
(step t73.t4.t7 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y))
(step t73.t4.t8 (cl (= (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))) :rule cong :premises (t73.t4.t6 t73.t4.t7))
(step t73.t4.t9 (cl (= (distinct smt__z smt__x) (not (= smt__z smt__x)))) :rule rare_rewrite :args ("distinct-binary-elim" smt__z smt__x))
(step t73.t4.t10 (cl (= (not (= smt__z smt__x)) (not (= smt__x smt__z)))) :rule cong :premises (t73.t4.t6))
(step t73.t4.t11 (cl (= (distinct smt__z smt__x) (not (= smt__x smt__z)))) :rule trans :premises (t73.t4.t9 t73.t4.t10))
(step t73.t4.t12 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) :rule refl)
(step t73.t4.t13 (cl (= (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule cong :premises (t73.t4.t11 t73.t4.t12))
(step t73.t4.t14 (cl (= (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) :rule cong :premises (t73.t4.t8 t73.t4.t13))
(step t73.t4.t15 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule cong :premises (t73.t4.t5 t73.t4.t14))
(step t73.t4 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule bind)
(anchor :step t73.t5 :args ((smt__f Idv) (:= smt__f smt__f) (smt__x Idv) (:= smt__x smt__x) (smt__y Idv) (:= smt__y smt__y) (smt__z Idv) (:= smt__z smt__z)))
(step t73.t5.t1 (cl (= smt__f smt__f)) :rule refl)
(step t73.t5.t2 (cl (= smt__x smt__x)) :rule refl)
(step t73.t5.t3 (cl (= smt__y smt__y)) :rule refl)
(step t73.t5.t4 (cl (= smt__z smt__z)) :rule refl)
(step t73.t5.t5 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule rare_rewrite :args ("bool-impl-elim" (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))
(step t73.t5.t6 (cl (= (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))))) :rule refl)
(step t73.t5.t7 (cl (= (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))) :rule rare_rewrite :args ("bool-impl-elim" (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))
(step t73.t5.t8 (cl (= (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (or (not (not (= smt__x smt__z))) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule rare_rewrite :args ("bool-impl-elim" (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))
(step t73.t5.t9 (cl (= (not (not (= smt__x smt__z))) (= smt__x smt__z))) :rule rare_rewrite :args ("bool-double-not-elim" (= smt__x smt__z)))
(step t73.t5.t10 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) :rule refl)
(step t73.t5.t11 (cl (= (or (not (not (= smt__x smt__z))) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule cong :premises (t73.t5.t9 t73.t5.t10))
(step t73.t5.t12 (cl (= (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule trans :premises (t73.t5.t8 t73.t5.t11))
(step t73.t5.t13 (cl (= (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) :rule cong :premises (t73.t5.t7 t73.t5.t12))
(step t73.t5.t14 (cl (= (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule cong :premises (t73.t5.t6 t73.t5.t13))
(step t73.t5.t15 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule trans :premises (t73.t5.t5 t73.t5.t14))
(step t73.t5 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule bind)
(step t73.t6 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule trans :premises (t73.t4 t73.t5))
(step t73.t7 (cl (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule resolution :premises (t73.t3 t73.t6 a14))
(step t73.t8 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) :rule resolution :premises (t73.t2 t73.t7))
(step t73 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) :rule subproof :discharge (t73.a0))
(step t74 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) :rule resolution :premises (t72 t73))
(step t75 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))))) :rule implies_neg2)
(step t76 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))))) :rule resolution :premises (t74 t75))
(step t77 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))))) :rule contraction :premises (t76))
(step t78 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))))) :rule resolution :premises (t62 t71 t77))
(step t79 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))))) :rule implies :premises (t78))
(step t80 (cl (not (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule equiv_pos2)
(anchor :step t81 :args ((smt__f Idv) (:= smt__f smt__f) (smt__x Idv) (:= smt__x smt__x) (smt__y Idv) (:= smt__y smt__y) (smt__z Idv) (:= smt__z smt__z)))
(step t81.t1 (cl (= smt__f smt__f)) :rule refl)
(step t81.t2 (cl (= smt__x smt__x)) :rule refl)
(step t81.t3 (cl (= smt__y smt__y)) :rule refl)
(step t81.t4 (cl (= smt__z smt__z)) :rule refl)
(step t81.t5 (cl (= (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)))) :rule refl)
(step t81.t6 (cl (= (= smt__z smt__x) (= smt__x smt__z))) :rule rare_rewrite :args ("eq-symm" smt__z smt__x))
(step t81.t7 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y))
(step t81.t8 (cl (= (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))) :rule cong :premises (t81.t6 t81.t7))
(step t81.t9 (cl (= (distinct smt__z smt__x) (not (= smt__z smt__x)))) :rule rare_rewrite :args ("distinct-binary-elim" smt__z smt__x))
(step t81.t10 (cl (= (not (= smt__z smt__x)) (not (= smt__x smt__z)))) :rule cong :premises (t81.t6))
(step t81.t11 (cl (= (distinct smt__z smt__x) (not (= smt__x smt__z)))) :rule trans :premises (t81.t9 t81.t10))
(step t81.t12 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) :rule refl)
(step t81.t13 (cl (= (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule cong :premises (t81.t11 t81.t12))
(step t81.t14 (cl (= (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) :rule cong :premises (t81.t8 t81.t13))
(step t81.t15 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule cong :premises (t81.t5 t81.t14))
(step t81 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule bind)
(anchor :step t82 :args ((smt__f Idv) (:= smt__f smt__f) (smt__x Idv) (:= smt__x smt__x) (smt__y Idv) (:= smt__y smt__y) (smt__z Idv) (:= smt__z smt__z)))
(step t82.t1 (cl (= smt__f smt__f)) :rule refl)
(step t82.t2 (cl (= smt__x smt__x)) :rule refl)
(step t82.t3 (cl (= smt__y smt__y)) :rule refl)
(step t82.t4 (cl (= smt__z smt__z)) :rule refl)
(step t82.t5 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule rare_rewrite :args ("bool-impl-elim" (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))
(step t82.t6 (cl (= (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))))) :rule refl)
(step t82.t7 (cl (= (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))) :rule rare_rewrite :args ("bool-impl-elim" (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))))
(step t82.t8 (cl (= (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (or (not (not (= smt__x smt__z))) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule rare_rewrite :args ("bool-impl-elim" (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))
(step t82.t9 (cl (= (not (not (= smt__x smt__z))) (= smt__x smt__z))) :rule rare_rewrite :args ("bool-double-not-elim" (= smt__x smt__z)))
(step t82.t10 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) :rule refl)
(step t82.t11 (cl (= (or (not (not (= smt__x smt__z))) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule cong :premises (t82.t9 t82.t10))
(step t82.t12 (cl (= (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :rule trans :premises (t82.t8 t82.t11))
(step t82.t13 (cl (= (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) :rule cong :premises (t82.t7 t82.t12))
(step t82.t14 (cl (= (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule cong :premises (t82.t6 t82.t13))
(step t82.t15 (cl (= (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule trans :premises (t82.t5 t82.t14))
(step t82 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__x smt__z) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (=> (not (= smt__x smt__z)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule bind)
(step t83 (cl (= (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))) :rule trans :premises (t81 t82))
(step t84 (cl (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule resolution :premises (t80 t83 a14))
(step t85 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c1___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))))) :rule resolution :premises (t79 t84))
(step t86 (cl (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c1___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))))) :rule resolution :premises (t36 t61 t85))
(step t87 (cl (or (= smt__CONSTANT___clt___ smt__CONSTANT___c1___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___)))) :rule resolution :premises (t34 t86))
(step t88 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___))) :rule resolution :premises (t13 t32 t87))
(step t89 (cl (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule symm :premises (t88))
(step t90 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule trans :premises (t11 t89))
(step t91 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule forall_inst :args ((:= smt__x (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (:= smt__y (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))
(step t92 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule or :premises (t91))
(step t93 (cl (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule resolution :premises (t92 a17))
(step t94 (cl (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule resolution :premises (t3 t90 t93))
(step t95 (cl (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule equiv_pos1)
(step t96 (cl (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) :rule reordering :premises (t95))
(step t97 (cl (= smt__CONSTANT___c2___ smt__CONSTANT___c2___)) :rule refl)
(step t98 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) :rule cong :premises (t9 t97))
(step t99 (cl (not (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) :rule or_pos)
(step t100 (cl (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)) (not (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule reordering :premises (t99))
(step t101 (cl (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule equiv_pos1)
(step t102 (cl (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)))) :rule reordering :premises (t101))
(step t103 (cl (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___))) :rule not_or :premises (a29))
(step t104 (cl (not (= (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))))) (not (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___)))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)))) :rule equiv_pos2)
(step t105 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___))) :rule refl)
(step t106 (cl (= (= smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule rare_rewrite :args ("eq-symm" smt__CONSTANT___c2___ smt__CONSTANT___clt___))
(step t107 (cl (= (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___)) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)))) :rule cong :premises (t105 t106))
(step t108 (cl (= (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))))) :rule cong :premises (t18 t107))
(step t109 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) :rule implies_neg1)
(anchor :step t110)
(assume t110.a0 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(step t110.t1 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___)))) :rule forall_inst :args ((:= smt__x smt__CONSTANT___c2___) (:= smt__y smt__CONSTANT___clt___)))
(step t110.t2 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) :rule or :premises (t110.t1))
(step t110.t3 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) :rule resolution :premises (t110.t2 t110.a0))
(step t110 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) :rule subproof :discharge (t110.a0))
(step t111 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) :rule resolution :premises (t109 t110))
(step t112 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) (not (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___)))) :rule implies_neg2)
(step t113 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___)))) :rule resolution :premises (t111 t112))
(step t114 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___c2___ smt__CONSTANT___clt___)))) :rule contraction :premises (t113))
(step t115 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)))) :rule resolution :premises (t104 t108 t114))
(step t116 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule implies :premises (t115))
(step t117 (cl (= (smt__TLA______TrigEq___Idv smt__CONSTANT___c2___ smt__CONSTANT___clt___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule resolution :premises (t116 a17))
(step t118 (cl (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule resolution :premises (t102 t103 t117))
(step t119 (cl (not (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule and_pos)
(step t120 (cl (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (not (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule reordering :premises (t119))
(step t121 (cl (not (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule or_pos)
(step t122 (cl (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule reordering :premises (t121))
(step t123 (cl (= (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true) (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)))) :rule equiv_simplify)
(step t124 (cl (not (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true)) (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule equiv1 :premises (t123))
(step t125 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule cong :premises (t97 t55))
(step t126 (cl (= (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) true) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule equiv_simplify)
(step t127 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) true) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule equiv2 :premises (t126))
(step t128 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) true)) :rule resolution :premises (t127 a23))
(step t129 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___)) true)) :rule trans :premises (t125 t128))
(step t130 (cl (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) :rule resolution :premises (t124 t129))
(step t131 (cl (not (= (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))))) (not (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule equiv_pos2)
(step t132 (cl (= (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))))) :rule refl)
(step t133 (cl (= (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule refl)
(step t134 (cl (= (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= smt__CONSTANT___clt___ smt__CONSTANT___c2___))) :rule refl)
(step t135 (cl (= (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule rare_rewrite :args ("eq-symm" (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))
(step t136 (cl (= (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule cong :premises (t134 t135))
(step t137 (cl (= (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule cong :premises (t133 t136))
(step t138 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule cong :premises (t132 t137))
(step t139 (cl (= (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))))) :rule cong :premises (t63 t138))
(step t140 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) :rule implies_neg1)
(anchor :step t141)
(assume t141.a0 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))))
(step t141.t1 (cl (or (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule forall_inst :args ((:= smt__f smt__VARIABLE___alloc___) (:= smt__x smt__CONSTANT___clt___) (:= smt__y (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) (:= smt__z smt__CONSTANT___c2___)))
(step t141.t2 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule or :premises (t141.t1))
(step t141.t3 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule resolution :premises (t141.t2 t84))
(step t141 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule subproof :discharge (t141.a0))
(step t142 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) :rule resolution :premises (t140 t141))
(step t143 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule implies_neg2)
(step t144 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))))) (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule resolution :premises (t142 t143))
(step t145 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))))) :rule contraction :premises (t144))
(step t146 (cl (=> (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))))) :rule resolution :premises (t131 t139 t145))
(step t147 (cl (not (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (or (not (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f))) (and (or (not (= smt__x smt__z)) (= smt__y (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z))) (or (= smt__x smt__z) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule implies :premises (t146))
(step t148 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c2___ (smt__TLA______FunDom smt__VARIABLE___alloc___))) (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))))) :rule resolution :premises (t147 t84))
(step t149 (cl (and (or (not (= smt__CONSTANT___clt___ smt__CONSTANT___c2___)) (= (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))))) :rule resolution :premises (t122 t130 t148))
(step t150 (cl (or (= smt__CONSTANT___clt___ smt__CONSTANT___c2___) (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___)))) :rule resolution :premises (t120 t149))
(step t151 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___) (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___))) :rule resolution :premises (t100 t118 t150))
(step t152 (cl (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___)) smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule symm :premises (t151))
(step t153 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule trans :premises (t98 t152))
(step t154 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))) :rule forall_inst :args ((:= smt__x (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)) (:= smt__y (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))))
(step t155 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule or :premises (t154))
(step t156 (cl (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))) :rule resolution :premises (t155 a17))
(step t157 (cl (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___))) :rule resolution :premises (t96 t153 t156))
(step t158 (cl) :rule resolution :premises (t1 t94 t157))

