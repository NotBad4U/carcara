(assume a0 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (= (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (= smt__x smt__y)) :pattern ((smt__TLA______SetExtTrigger smt__x smt__y)))))
(assume a1 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (=> (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (smt__TLA______SubsetEq smt__x smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y)))))
(assume a2 (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (! (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)))))
(assume a3 (forall ((smt__a Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Subset smt__a)) (smt__TLA______SubsetEq smt__x smt__a)) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Subset smt__a))) :pattern ((smt__TLA______SubsetEq smt__x smt__a) (smt__TLA______Subset smt__a)))))
(assume a4 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b))) :pattern ((smt__TLA______Mem smt__x smt__a) (smt__TLA______Cap smt__a smt__b)) :pattern ((smt__TLA______Mem smt__x smt__b) (smt__TLA______Cap smt__a smt__b)))))
(assume a5 (forall ((smt__f Idv) (smt__g Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g) (= (smt__TLA______FunDom smt__f) (smt__TLA______FunDom smt__g)) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp smt__f smt__x) (smt__TLA______FunApp smt__g smt__x))))) (= smt__f smt__g)) :pattern ((smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g)))))
(assume a6 (forall ((smt__x Idv) (smt__y Idv)) (! (smt__TLA______SetExtTrigger (smt__TLA______Cap smt__x smt__y) smt__TLA______SetEnum___0) :pattern ((smt__TLA______Cap smt__x smt__y)))))
(assume a7 (forall ((smt__x Idv)) (! (not (smt__TLA______Mem smt__x smt__TLA______SetEnum___0)) :pattern ((smt__TLA______Mem smt__x smt__TLA______SetEnum___0)))))
(assume a8 (forall ((smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)) :pattern ((smt__TLA______TrigEq___Idv smt__x smt__y)))))
(assume a9 (smt__TLA______Mem smt__CONSTANT___clt___ smt__CONSTANT___Client___))
(assume a10 (smt__TLA______Mem smt__CONSTANT___S___ (smt__TLA______Subset smt__CONSTANT___Resource___)))
(assume a11 (forall ((smt__CONSTANT___c1___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))))))
(assume a12 (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))))
(step t1 (cl (not (= (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))) (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (not (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))))) (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule equiv_pos2)
(anchor :step t2 :args ((smt__CONSTANT___c1___ Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (smt__CONSTANT___c2___ Idv) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___)))
(step t2.t1 (cl (= smt__CONSTANT___c1___ smt__CONSTANT___c1___)) :rule refl)
(step t2.t2 (cl (= smt__CONSTANT___c2___ smt__CONSTANT___c2___)) :rule refl)
(step t2.t3 (cl (= (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)))) :rule refl)
(step t2.t4 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) :rule all_simplify)
(step t2.t5 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule all_simplify)
(step t2.t6 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule trans :premises (t2.t4 t2.t5))
(step t2.t7 (cl (= (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule cong :premises (t2.t3 t2.t6))
(step t2 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))))) :rule bind)
(step t3 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule all_simplify)
(step t4 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule all_simplify)
(anchor :step t5 :args ((smt__CONSTANT___c1___ Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (smt__CONSTANT___c2___ Idv) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___) (BOUND_VARIABLE_5079 Idv) (:= BOUND_VARIABLE_5079 BOUND_VARIABLE_5079)))
(step t5.t1 (cl (= smt__CONSTANT___c1___ smt__CONSTANT___c1___)) :rule refl)
(step t5.t2 (cl (= smt__CONSTANT___c2___ smt__CONSTANT___c2___)) :rule refl)
(step t5.t3 (cl (= BOUND_VARIABLE_5079 BOUND_VARIABLE_5079)) :rule refl)
(step t5.t4 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (rare-list (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) rare-list))
(step t5 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule bind)
(step t6 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t4 t5))
(step t7 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t3 t6))
(step t8 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t2 t7))
(step t9 (cl (= (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv)) (=> (and (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))) (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule cong :premises (t8))
(step t10 (cl (not (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule resolution :premises (t1 t9 a12))
(step t11 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043)))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule hole)
(step t12 (cl (not (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043))))))) (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) :rule equiv1 :premises (t11))
(step t13 (cl (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) (not (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043)))))))) :rule reordering :premises (t12))
(step t14 (cl (not (= (forall ((smt__CONSTANT___c1___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043)))))))) (not (forall ((smt__CONSTANT___c1___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043))))))) :rule equiv_pos2)
(anchor :step t15 :args ((smt__CONSTANT___c1___ Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___)))
(step t15.t1 (cl (= smt__CONSTANT___c1___ smt__CONSTANT___c1___)) :rule refl)
(step t15.t2 (cl (= (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))) :rule refl)
(anchor :step t15.t3 :args ((smt__CONSTANT___c2___ Idv) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___)))
(step t15.t3.t1 (cl (= smt__CONSTANT___c2___ smt__CONSTANT___c2___)) :rule refl)
(step t15.t3.t2 (cl (= (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) :rule refl)
(step t15.t3.t3 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) :rule all_simplify)
(step t15.t3.t4 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule all_simplify)
(step t15.t3.t5 (cl (= (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule trans :premises (t15.t3.t3 t15.t3.t4))
(step t15.t3.t6 (cl (= (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule cong :premises (t15.t3.t2 t15.t3.t5))
(step t15.t3 (cl (= (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))))) :rule bind)
(anchor :step t15.t4 :args ((smt__CONSTANT___c2___ Idv) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___)))
(step t15.t4.t1 (cl (= smt__CONSTANT___c2___ smt__CONSTANT___c2___)) :rule refl)
(step t15.t4.t2 (cl (= (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule rare_rewrite :args ("bool-impl-elim" (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))
(step t15.t4.t3 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (rare-list (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) rare-list))
(step t15.t4.t4 (cl (= (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule trans :premises (t15.t4.t2 t15.t4.t3))
(step t15.t4 (cl (= (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule bind)
(step t15.t5 (cl (= (forall ((smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule all_simplify)
(anchor :step t15.t6 :args ((smt__CONSTANT___c2___ Idv) (:= smt__CONSTANT___c2___ smt__CONSTANT___c2___) (BOUND_VARIABLE_5026 Idv) (:= BOUND_VARIABLE_5026 BOUND_VARIABLE_5026)))
(step t15.t6.t1 (cl (= smt__CONSTANT___c2___ smt__CONSTANT___c2___)) :rule refl)
(step t15.t6.t2 (cl (= BOUND_VARIABLE_5026 BOUND_VARIABLE_5026)) :rule refl)
(step t15.t6.t3 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (rare-list (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) rare-list))
(step t15.t6 (cl (= (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (or (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule bind)
(step t15.t7 (cl (= (forall ((smt__CONSTANT___c2___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t15.t5 t15.t6))
(step t15.t8 (cl (= (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (or (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (forall ((smt__CONSTANT___r___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___)) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t15.t4 t15.t7))
(step t15.t9 (cl (= (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) :rule trans :premises (t15.t3 t15.t8))
(step t15.t10 (cl (= (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___))))))) (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule cong :premises (t15.t2 t15.t9))
(step t15 (cl (= (forall ((smt__CONSTANT___c1___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule bind)
(anchor :step t16 :args ((smt__CONSTANT___c1___ Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___)))
(step t16.t1 (cl (= smt__CONSTANT___c1___ smt__CONSTANT___c1___)) :rule refl)
(step t16.t2 (cl (= (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))) :rule rare_rewrite :args ("bool-impl-elim" (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))))
(step t16 (cl (= (forall ((smt__CONSTANT___c1___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))))) :rule bind)
(step t17 (cl (= (forall ((smt__CONSTANT___c1___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (or (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043))))))))) :rule all_simplify)
(anchor :step t18 :args ((smt__CONSTANT___c1___ Idv) (:= smt__CONSTANT___c1___ smt__CONSTANT___c1___) (BOUND_VARIABLE_5045 Idv) (:= BOUND_VARIABLE_5045 BOUND_VARIABLE_5045) (BOUND_VARIABLE_5043 Idv) (:= BOUND_VARIABLE_5043 BOUND_VARIABLE_5043)))
(step t18.t1 (cl (= smt__CONSTANT___c1___ smt__CONSTANT___c1___)) :rule refl)
(step t18.t2 (cl (= BOUND_VARIABLE_5045 BOUND_VARIABLE_5045)) :rule refl)
(step t18.t3 (cl (= BOUND_VARIABLE_5043 BOUND_VARIABLE_5043)) :rule refl)
(step t18.t4 (cl (= (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (or (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043)))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043))))))) :rule rare_rewrite :args ("bool-or-flatten" (rare-list (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (rare-list (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043))))) rare-list))
(step t18 (cl (= (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (or (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043))))))) (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043)))))))) :rule bind)
(step t19 (cl (= (forall ((smt__CONSTANT___c1___ Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043)))))))) :rule trans :premises (t17 t18))
(step t20 (cl (= (forall ((smt__CONSTANT___c1___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5026 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5026 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5026 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043)))))))) :rule trans :premises (t16 t19))
(step t21 (cl (= (forall ((smt__CONSTANT___c1___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___c2___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___) (forall ((smt__CONSTANT___r___ Idv)) (=> (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (=> (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))))))) (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043)))))))) :rule trans :premises (t15 t20))
(step t22 (cl (forall ((smt__CONSTANT___c1___ Idv) (BOUND_VARIABLE_5045 Idv) (BOUND_VARIABLE_5043 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem BOUND_VARIABLE_5043 smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ BOUND_VARIABLE_5043) (not (smt__TLA______Mem BOUND_VARIABLE_5045 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5045 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime BOUND_VARIABLE_5043))))))) :rule resolution :premises (t14 t21 a11))
(step t23 (cl (forall ((smt__CONSTANT___c1___ Idv) (smt__CONSTANT___c2___ Idv) (BOUND_VARIABLE_5079 Idv)) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (not (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___)) (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___) (not (smt__TLA______Mem BOUND_VARIABLE_5079 smt__CONSTANT___Resource___)) (not (smt__TLA______Mem BOUND_VARIABLE_5079 (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))))) :rule resolution :premises (t13 t22))
(step t24 (cl) :rule resolution :premises (t10 t23))

