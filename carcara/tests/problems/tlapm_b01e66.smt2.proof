(assume a0 (forall ((smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)) :pattern ((smt__TLA______TrigEq___Idv smt__x smt__y)))))
(assume a1 (=> (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))
(assume a2 (=> (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___) (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))
(assume a3 (not (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))
(step t1 (cl (not (= (not (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))) (not (not (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule equiv_pos2)
(step t2 (cl (= (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (and (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)))) :rule all_simplify)
(step t3 (cl (= (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (= smt__TLA______Tt___Idv smt__ACTION___Next___))) :rule all_simplify)
(step t4 (cl (= (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) :rule refl)
(step t5 (cl (= (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)))) :rule cong :premises (t3 t4))
(step t6 (cl (= (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___))) :rule all_simplify)
(step t7 (cl (= (= smt__STATE___Mutex___ smt__TLA______Tt___Idv) (= smt__TLA______Tt___Idv smt__STATE___Mutex___))) :rule all_simplify)
(step t8 (cl (= (and (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)))) :rule cong :premises (t5 t6 t7))
(step t9 (cl (= (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)))) :rule trans :premises (t2 t8))
(step t10 (cl (= (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) :rule refl)
(step t11 (cl (= (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule cong :premises (t9 t10))
(step t12 (cl (= (not (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))) :rule cong :premises (t11))
(step t13 (cl (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule resolution :premises (t1 t12 a3))
(step t14 (cl (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___))) :rule not_implies1 :premises (t13))
(step t15 (cl (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) :rule and :premises (t14))
(step t16 (cl (not (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) :rule or_pos)
(step t17 (cl (not (= (=> (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) (=> (= smt__TLA______Tt___Idv smt__ACTION___Next___) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))) (not (=> (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) (=> (= smt__TLA______Tt___Idv smt__ACTION___Next___) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule equiv_pos2)
(step t18 (cl (= (=> (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) (=> (= smt__TLA______Tt___Idv smt__ACTION___Next___) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))) :rule cong :premises (t3 t11))
(step t19 (cl (=> (= smt__TLA______Tt___Idv smt__ACTION___Next___) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule resolution :premises (t17 t18 a1))
(step t20 (cl (not (= smt__TLA______Tt___Idv smt__ACTION___Next___)) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) :rule implies :premises (t19))
(step t21 (cl (not (= (not (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))) (not (not (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule equiv_pos2)
(step t22 (cl (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule resolution :premises (t21 t12 a3))
(step t23 (cl (not (= smt__TLA______Tt___Idv smt__ACTION___Next___))) :rule resolution :premises (t20 t22))
(step t24 (cl (not (= (=> (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___) (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) (=> (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))) (not (=> (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___) (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) (=> (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule equiv_pos2)
(step t25 (cl (= (=> (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___) (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) (=> (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))) :rule cong :premises (t4 t11))
(step t26 (cl (=> (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule resolution :premises (t24 t25 a2))
(step t27 (cl (not (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) :rule implies :premises (t26))
(step t28 (cl (not (= (not (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))) (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv))))) (not (not (=> (and (and (= smt__STATE___TypeInvariant___ smt__TLA______Tt___Idv) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv)) (or (= smt__ACTION___Next___ smt__TLA______Tt___Idv) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule equiv_pos2)
(step t29 (cl (not (=> (and (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)) (= smt__TLA______Tt___Idv smt__STATE___TypeInvariant___) (= smt__TLA______Tt___Idv smt__STATE___Mutex___)) (= smt__TLA______Anon___OPAQUE___h93432 smt__TLA______Tt___Idv)))) :rule resolution :premises (t28 t12 a3))
(step t30 (cl (not (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___))) :rule resolution :premises (t27 t29))
(step t31 (cl (not (or (= smt__TLA______Tt___Idv smt__ACTION___Next___) (smt__TLA______TrigEq___Idv smt__TLA______Anon___OPAQUE___h6fbaa smt__STATE___vars___)))) :rule resolution :premises (t16 t23 t30))
(step t32 (cl) :rule resolution :premises (t15 t31))