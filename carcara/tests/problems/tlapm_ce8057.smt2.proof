unsat
(assume a0 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (= (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (= smt__x smt__y)) :pattern ((smt__TLA______SetExtTrigger smt__x smt__y)))))
(assume a1 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (=> (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (smt__TLA______SubsetEq smt__x smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y)))))
(assume a2 (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (! (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)))))
(assume a3 (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (=> (and (smt__TLA______Mem smt__y smt__a) (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))))
(assume a4 (forall ((smt__a Idv) (smt__x Idv)) (! (=> (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)) (exists ((smt__y Idv)) (and (smt__TLA______Mem smt__y smt__a) (smt__TLA______Mem smt__x smt__y)))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Union smt__a))))))
(assume a5 (forall ((smt__a Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Subset smt__a)) (smt__TLA______SubsetEq smt__x smt__a)) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Subset smt__a))) :pattern ((smt__TLA______SubsetEq smt__x smt__a) (smt__TLA______Subset smt__a)))))
(assume a6 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))))
(assume a7 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b))))))
(assume a8 (forall ((smt__f Idv) (smt__g Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g) (= (smt__TLA______FunDom smt__f) (smt__TLA______FunDom smt__g)) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp smt__f smt__x) (smt__TLA______FunApp smt__g smt__x))))) (= smt__f smt__g)) :pattern ((smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g)))))
(assume a9 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b)))) (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))))))
(assume a10 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (! (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a))) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))))))
(assume a11 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv) (smt__x Idv)) (! (=> (and (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__x smt__a)) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b)) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__x smt__a)) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______FunApp smt__f smt__x)))))
(assume a12 (forall ((smt__x Idv) (smt__y Idv)) (! (smt__TLA______SetExtTrigger (smt__TLA______Cap smt__x smt__y) smt__TLA______SetEnum___0) :pattern ((smt__TLA______Cap smt__x smt__y)))))
(assume a13 (forall ((smt__a Idv) (smt__b Idv)) (! (smt__TLA______SetExtTrigger smt__a smt__b) :pattern ((smt__TLA______IsSetOf smt__a) (smt__TLA______IsSetOf smt__b)))))
(assume a14 (forall ((smt__x Idv)) (! (not (smt__TLA______Mem smt__x smt__TLA______SetEnum___0)) :pattern ((smt__TLA______Mem smt__x smt__TLA______SetEnum___0)))))
(assume a15 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(assume a16 (smt__TLA______Mem smt__CONSTANT___clt___ smt__CONSTANT___Client___))
(assume a17 (smt__TLA______Mem smt__CONSTANT___S___ (smt__TLA______Subset smt__CONSTANT___Resource___)))
(assume a18 (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))
(assume a19 (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))
(assume a20 (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___))
(assume a21 (and (and (smt__TLA______Mem smt__VARIABLE___unsat___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))) (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv) (= (smt__ACTION___Allocate___ smt__CONSTANT___clt___ smt__CONSTANT___S___) smt__TLA______Tt___Idv)))
(assume a22 (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))
(assume a23 (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))
(assume a24 (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))
(assume a25 (forall ((smt__a1 Idv) (smt__y1 Idv)) (=> (smt__TLA______Mem smt__y1 smt__a1) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))))
(assume a26 (forall ((smt__a1 Idv) (smt__x Idv)) (! (=> (smt__TLA______Mem smt__x (smt__TLA______SetOf___1___flatnd___1 smt__a1)) (exists ((smt__y1 Idv)) (and (smt__TLA______Mem smt__y1 smt__a1) (= smt__x (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1))))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______SetOf___1___flatnd___1 smt__a1))))))
(assume a27 (forall ((smt__a Idv)) (! (smt__TLA______IsSetOf (smt__TLA______SetOf___1___flatnd___1 smt__a)) :pattern ((smt__TLA______SetOf___1___flatnd___1 smt__a)))))
(assume a28 (not (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))))
(step t1 (cl (=> (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a))))) :rule implies_neg1)
(anchor :step t2)
(assume t2.a0 (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))))
(step t2.t1 (cl (or (not (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a))))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) :rule forall_inst :args ((:= smt__a (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)) (:= smt__x smt__CONSTANT___r___) (:= smt__y (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))
(step t2.t2 (cl (not (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a))))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule or :premises (t2.t1))
(step t2.t3 (cl (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule resolution :premises (t2.t2 t2.a0))
(step t2 (cl (not (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a))))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule subproof :discharge (t2.a0))
(step t3 (cl (=> (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule resolution :premises (t1 t2))
(step t4 (cl (=> (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) (not (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) :rule implies_neg2)
(step t5 (cl (=> (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) (=> (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) :rule resolution :premises (t3 t4))
(step t6 (cl (=> (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) :rule contraction :premises (t5))
(step t7 (cl (not (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a))))) (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule implies :premises (t6))
(step t8 (cl (not (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) :rule or_pos)
(step t9 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (not (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) :rule reordering :premises (t8))
(step t10 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule and_pos)
(step t11 (cl (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (not (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) :rule reordering :premises (t10))
(step t12 (cl (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) :rule equiv_pos2)
(step t13 (cl (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))))) :rule reordering :premises (t12))
(step t14 (cl (not (= (not (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) (not (not (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule equiv_pos2)
(step t15 (cl (= (not (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) :rule all_simplify)
(step t16 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule resolution :premises (t14 t15 a28))
(step t17 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b)))))) :rule implies_neg1)
(anchor :step t18)
(assume t18.a0 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b))))))
(step t18.t1 (cl (or (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b)))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))))) :rule forall_inst :args ((:= smt__a smt__CONSTANT___Resource___) (:= smt__b (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (:= smt__x smt__CONSTANT___r___)))
(step t18.t2 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b)))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) :rule or :premises (t18.t1))
(step t18.t3 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) :rule resolution :premises (t18.t2 t18.a0))
(step t18 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b)))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) :rule subproof :discharge (t18.a0))
(step t19 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) :rule resolution :premises (t17 t18))
(step t20 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))))) :rule implies_neg2)
(step t21 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))))) :rule resolution :premises (t19 t20))
(step t22 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))))) :rule contraction :premises (t21))
(step t23 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b)))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) :rule implies :premises (t22))
(step t24 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______SetMinus smt__CONSTANT___Resource___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))))) :rule resolution :premises (t23 a7))
(step t25 (cl (and (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) :rule resolution :premises (t13 t16 t24))
(step t26 (cl (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule resolution :premises (t11 t25))
(step t27 (cl (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) :rule or_pos)
(step t28 (cl (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)) (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule reordering :premises (t27))
(step t29 (cl (=> (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1))))) :rule implies_neg1)
(anchor :step t30)
(assume t30.a0 (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))))
(step t30.t1 (cl (or (not (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule forall_inst :args ((:= smt__a1 smt__CONSTANT___Client___) (:= smt__y1 smt__CONSTANT___c1___)))
(step t30.t2 (cl (not (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) :rule or :premises (t30.t1))
(step t30.t3 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) :rule resolution :premises (t30.t2 t30.a0))
(step t30 (cl (not (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) :rule subproof :discharge (t30.a0))
(step t31 (cl (=> (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) :rule resolution :premises (t29 t30))
(step t32 (cl (=> (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (not (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule implies_neg2)
(step t33 (cl (=> (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) (=> (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule resolution :premises (t31 t32))
(step t34 (cl (=> (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))))) :rule contraction :premises (t33))
(step t35 (cl (not (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1))))) (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) :rule implies :premises (t34))
(step t36 (cl (not (= (forall ((smt__a1 Idv) (smt__y1 Idv)) (=> (smt__TLA______Mem smt__y1 smt__a1) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))) (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))))) (not (forall ((smt__a1 Idv) (smt__y1 Idv)) (=> (smt__TLA______Mem smt__y1 smt__a1) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1))))) (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1))))) :rule equiv_pos2)
(step t37 (cl (= (forall ((smt__a1 Idv) (smt__y1 Idv)) (=> (smt__TLA______Mem smt__y1 smt__a1) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))) (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1)))))) :rule all_simplify)
(step t38 (cl (forall ((smt__a1 Idv) (smt__y1 Idv)) (or (not (smt__TLA______Mem smt__y1 smt__a1)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__y1) (smt__TLA______SetOf___1___flatnd___1 smt__a1))))) :rule resolution :premises (t36 t37 a25))
(step t39 (cl (or (not (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___)) (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))) :rule resolution :premises (t35 t38))
(step t40 (cl (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) :rule resolution :premises (t28 a18 t39))
(step t41 (cl (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) :rule and_neg)
(step t42 (cl (=> (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) :rule implies_neg1)
(anchor :step t43)
(assume t43.a0 (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))
(assume t43.a1 (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))
(step t43.t1 (cl (=> (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule implies_neg1)
(anchor :step t43.t2)
(assume t43.t2.a0 (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))
(assume t43.t2.a1 (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))
(step t43.t2.t1 (cl (= (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) true) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule equiv_simplify)
(step t43.t2.t2 (cl (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) true)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule equiv1 :premises (t43.t2.t1))
(step t43.t2.t3 (cl (= smt__CONSTANT___r___ smt__CONSTANT___r___)) :rule refl)
(step t43.t2.t4 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) :rule symm :premises (t43.t2.a1))
(step t43.t2.t5 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) :rule cong :premises (t43.t2.t3 t43.t2.t4))
(step t43.t2.t6 (cl (= (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) true) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) :rule equiv_simplify)
(step t43.t2.t7 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) true) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) :rule equiv2 :premises (t43.t2.t6))
(step t43.t2.t8 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) true)) :rule resolution :premises (t43.t2.t7 t43.t2.a0))
(step t43.t2.t9 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) true)) :rule trans :premises (t43.t2.t5 t43.t2.t8))
(step t43.t2.t10 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule resolution :premises (t43.t2.t2 t43.t2.t9))
(step t43.t2 (cl (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule subproof :discharge (t43.t2.a0 t43.t2.a1))
(step t43.t3 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) :rule and_pos)
(step t43.t4 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule and_pos)
(step t43.t5 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule resolution :premises (t43.t2 t43.t3 t43.t4))
(step t43.t6 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule reordering :premises (t43.t5))
(step t43.t7 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule contraction :premises (t43.t6))
(step t43.t8 (cl (=> (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule resolution :premises (t43.t1 t43.t7))
(step t43.t9 (cl (=> (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule implies_neg2)
(step t43.t10 (cl (=> (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (=> (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule resolution :premises (t43.t8 t43.t9))
(step t43.t11 (cl (=> (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule contraction :premises (t43.t10))
(step t43.t12 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule implies :premises (t43.t11))
(step t43.t13 (cl (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule and_neg)
(step t43.t14 (cl (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule resolution :premises (t43.t13 t43.a1 t43.a0))
(step t43.t15 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule resolution :premises (t43.t12 t43.t14))
(step t43 (cl (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule subproof :discharge (t43.a0 t43.a1))
(step t44 (cl (not (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule and_pos)
(step t45 (cl (not (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) :rule and_pos)
(step t46 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (not (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) (not (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))))) :rule resolution :premises (t43 t44 t45))
(step t47 (cl (not (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) (not (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule reordering :premises (t46))
(step t48 (cl (not (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule contraction :premises (t47))
(step t49 (cl (=> (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule resolution :premises (t42 t48))
(step t50 (cl (=> (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule implies_neg2)
(step t51 (cl (=> (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (=> (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule resolution :premises (t49 t50))
(step t52 (cl (=> (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule contraction :premises (t51))
(step t53 (cl (not (and (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule implies :premises (t52))
(step t54 (cl (not (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule resolution :premises (t41 t53))
(step t55 (cl (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (not (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule equiv_pos2)
(step t56 (cl (not (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule reordering :premises (t55))
(step t57 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) :rule implies_neg1)
(anchor :step t58)
(assume t58.a0 (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))))
(step t58.t1 (cl (or (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule forall_inst :args ((:= smt__x (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (:= smt__y (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))
(step t58.t2 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule or :premises (t58.t1))
(step t58.t3 (cl (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule resolution :premises (t58.t2 t58.a0))
(step t58 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule subproof :discharge (t58.a0))
(step t59 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule resolution :premises (t57 t58))
(step t60 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (not (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule implies_neg2)
(step t61 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule resolution :premises (t59 t60))
(step t62 (cl (=> (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))) :rule contraction :premises (t61))
(step t63 (cl (not (forall ((smt__x Idv) (smt__y Idv)) (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)))) (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule implies :premises (t62))
(step t64 (cl (= (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)) (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___)))) :rule resolution :premises (t63 a15))
(step t65 (cl (= (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule resolution :premises (t56 a23 t64))
(step t66 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) :rule and_pos)
(step t67 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule reordering :premises (t66))
(step t68 (cl (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) :rule equiv_pos2)
(step t69 (cl (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule reordering :premises (t68))
(step t70 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) :rule implies_neg1)
(anchor :step t71)
(assume t71.a0 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))))
(step t71.t1 (cl (or (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule forall_inst :args ((:= smt__a (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (:= smt__b (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)) (:= smt__x smt__CONSTANT___r___)))
(step t71.t2 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule or :premises (t71.t1))
(step t71.t3 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule resolution :premises (t71.t2 t71.a0))
(step t71 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule subproof :discharge (t71.a0))
(step t72 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule resolution :premises (t70 t71))
(step t73 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule implies_neg2)
(step t74 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule resolution :premises (t72 t73))
(step t75 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule contraction :premises (t74))
(step t76 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule implies :premises (t75))
(step t77 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule resolution :premises (t76 a6))
(step t78 (cl (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) :rule resolution :premises (t69 a22 t77))
(step t79 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) :rule resolution :premises (t67 t78))
(step t80 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) :rule resolution :premises (t54 t65 t79))
(step t81 (cl (not (or (not (smt__TLA______Mem (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___) (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Union (smt__TLA______SetOf___1___flatnd___1 smt__CONSTANT___Client___)))))) :rule resolution :premises (t9 t26 t40 t80))
(step t82 (cl (not (= (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (=> (and (smt__TLA______Mem smt__y smt__a) (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))) (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))))) (not (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (=> (and (smt__TLA______Mem smt__y smt__a) (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a))))) (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a))))) :rule equiv_pos2)
(step t83 (cl (= (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (=> (and (smt__TLA______Mem smt__y smt__a) (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))) (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a)))))) :rule all_simplify)
(step t84 (cl (forall ((smt__a Idv) (smt__x Idv) (smt__y Idv)) (or (not (smt__TLA______Mem smt__y smt__a)) (not (smt__TLA______Mem smt__x smt__y)) (smt__TLA______Mem smt__x (smt__TLA______Union smt__a))))) :rule resolution :premises (t82 t83 a3))
(step t85 (cl) :rule resolution :premises (t7 t81 t84))

