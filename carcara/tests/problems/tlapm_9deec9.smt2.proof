(assume a0 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (= (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (= smt__x smt__y)) :pattern ((smt__TLA______SetExtTrigger smt__x smt__y)))))
(assume a1 (forall ((smt__x Idv) (smt__y Idv)) (! (=> (forall ((smt__z Idv)) (=> (smt__TLA______Mem smt__z smt__x) (smt__TLA______Mem smt__z smt__y))) (smt__TLA______SubsetEq smt__x smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y)))))
(assume a2 (forall ((smt__x Idv) (smt__y Idv) (smt__z Idv)) (! (=> (and (smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)) (smt__TLA______Mem smt__z smt__y)) :pattern ((smt__TLA______SubsetEq smt__x smt__y) (smt__TLA______Mem smt__z smt__x)))))
(assume a3 (forall ((smt__a Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Subset smt__a)) (smt__TLA______SubsetEq smt__x smt__a)) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Subset smt__a))) :pattern ((smt__TLA______SubsetEq smt__x smt__a) (smt__TLA______Subset smt__a)))))
(assume a4 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______Cup smt__a smt__b)) (or (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______Cup smt__a smt__b))) :pattern ((smt__TLA______Mem smt__x smt__a) (smt__TLA______Cup smt__a smt__b)) :pattern ((smt__TLA______Mem smt__x smt__b) (smt__TLA______Cup smt__a smt__b)))))
(assume a5 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))))
(assume a6 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (! (= (smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (not (smt__TLA______Mem smt__x smt__b)))) :pattern ((smt__TLA______Mem smt__x (smt__TLA______SetMinus smt__a smt__b))) :pattern ((smt__TLA______Mem smt__x smt__a) (smt__TLA______SetMinus smt__a smt__b)) :pattern ((smt__TLA______Mem smt__x smt__b) (smt__TLA______SetMinus smt__a smt__b)))))
(assume a7 (forall ((smt__f Idv) (smt__g Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g) (= (smt__TLA______FunDom smt__f) (smt__TLA______FunDom smt__g)) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp smt__f smt__x) (smt__TLA______FunApp smt__g smt__x))))) (= smt__f smt__g)) :pattern ((smt__TLA______FunIsafcn smt__f) (smt__TLA______FunIsafcn smt__g)))))
(assume a8 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (! (=> (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a) (forall ((smt__x Idv)) (=> (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b)))) (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))))))
(assume a9 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv)) (! (=> (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (and (smt__TLA______FunIsafcn smt__f) (= (smt__TLA______FunDom smt__f) smt__a))) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b))))))
(assume a10 (forall ((smt__a Idv) (smt__b Idv) (smt__f Idv) (smt__x Idv)) (! (=> (and (smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__x smt__a)) (smt__TLA______Mem (smt__TLA______FunApp smt__f smt__x) smt__b)) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______Mem smt__x smt__a)) :pattern ((smt__TLA______Mem smt__f (smt__TLA______FunSet smt__a smt__b)) (smt__TLA______FunApp smt__f smt__x)))))
(assume a11 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (! (smt__TLA______FunIsafcn (smt__TLA______FunExcept smt__f smt__x smt__y)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y)))))
(assume a12 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______FunDom (smt__TLA______FunExcept smt__f smt__x smt__y)) (smt__TLA______FunDom smt__f)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y)))))
(assume a13 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv)) (! (=> (smt__TLA______Mem smt__x (smt__TLA______FunDom smt__f)) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__x) smt__y)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y)))))
(assume a14 (forall ((smt__f Idv) (smt__x Idv) (smt__y Idv) (smt__z Idv)) (! (=> (smt__TLA______Mem smt__z (smt__TLA______FunDom smt__f)) (and (=> (= smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) smt__y)) (=> (distinct smt__z smt__x) (= (smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z) (smt__TLA______FunApp smt__f smt__z))))) :pattern ((smt__TLA______FunApp (smt__TLA______FunExcept smt__f smt__x smt__y) smt__z)) :pattern ((smt__TLA______FunExcept smt__f smt__x smt__y) (smt__TLA______FunApp smt__f smt__z)))))
(assume a15 (forall ((smt__x Idv) (smt__y Idv)) (! (smt__TLA______SetExtTrigger (smt__TLA______Cap smt__x smt__y) smt__TLA______SetEnum___0) :pattern ((smt__TLA______Cap smt__x smt__y)))))
(assume a16 (forall ((smt__x Idv)) (! (not (smt__TLA______Mem smt__x smt__TLA______SetEnum___0)) :pattern ((smt__TLA______Mem smt__x smt__TLA______SetEnum___0)))))
(assume a17 (forall ((smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______TrigEq___Idv smt__x smt__y) (= smt__x smt__y)) :pattern ((smt__TLA______TrigEq___Idv smt__x smt__y)))))
(assume a18 (forall ((smt__x Idv) (smt__y Idv)) (! (= (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y) (= smt__x smt__y)) :pattern ((smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y)))))
(assume a19 (forall ((smt__x Idv) (smt__y Idv)) (! (smt__TLA______SetExtTrigger smt__x smt__y) :pattern ((smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__x smt__y)))))
(assume a20 (smt__TLA______Mem smt__CONSTANT___clt___ smt__CONSTANT___Client___))
(assume a21 (smt__TLA______Mem smt__CONSTANT___S___ (smt__TLA______Subset smt__CONSTANT___Resource___)))
(assume a22 (smt__TLA______Mem smt__CONSTANT___c1___ smt__CONSTANT___Client___))
(assume a23 (smt__TLA______Mem smt__CONSTANT___c2___ smt__CONSTANT___Client___))
(assume a24 (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___Resource___))
(assume a25 (and (and (smt__TLA______Mem smt__VARIABLE___unsat___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___))) (smt__TLA______Mem smt__VARIABLE___alloc___ (smt__TLA______FunSet smt__CONSTANT___Client___ (smt__TLA______Subset smt__CONSTANT___Resource___)))) (= smt__STATE___Mutex___ smt__TLA______Tt___Idv) (and (not (smt__TLA______TrigEq___Setdollarsign___Idvdollarsign___ smt__CONSTANT___S___ smt__TLA______SetEnum___0)) (smt__TLA______SubsetEq smt__CONSTANT___S___ (smt__TLA______Cap smt__STATE___available___ (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___))))))
(assume a26 (smt__TLA______TrigEq___Idv smt__VARIABLE___alloc______prime (smt__TLA______FunExcept smt__VARIABLE___alloc___ smt__CONSTANT___clt___ (smt__TLA______Cup (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))
(assume a27 (smt__TLA______TrigEq___Idv smt__VARIABLE___unsat______prime (smt__TLA______FunExcept smt__VARIABLE___unsat___ smt__CONSTANT___clt___ (smt__TLA______SetMinus (smt__TLA______FunApp smt__VARIABLE___unsat___ smt__CONSTANT___clt___) smt__CONSTANT___S___))))
(assume a28 (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))
(assume a29 (not (smt__TLA______TrigEq___Idv smt__CONSTANT___c1___ smt__CONSTANT___c2___)))
(assume a30 (smt__TLA______TrigEq___Idv (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___) (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c2___)))
(assume a31 (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc___ smt__CONSTANT___c1___))))
(assume a32 (not (smt__TLA______Mem smt__CONSTANT___r___ smt__STATE___available___)))
(assume a33 (not (smt__TLA______Mem smt__CONSTANT___r___ smt__CONSTANT___S___)))
(assume a34 (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))))
(assume a35 (not false))
(step t1 (cl (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) :rule equiv_pos2)
(step t2 (cl (not (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule reordering :premises (t1))
(step t3 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) :rule implies_neg1)
(anchor :step t4)
(assume t4.a0 (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))))
(step t4.t1 (cl (or (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule forall_inst :args ((:= smt__a (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (:= smt__b (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)) (:= smt__x smt__CONSTANT___r___)))
(step t4.t2 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule or :premises (t4.t1))
(step t4.t3 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule resolution :premises (t4.t2 t4.a0))
(step t4 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule subproof :discharge (t4.a0))
(step t5 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule resolution :premises (t3 t4))
(step t6 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (not (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule implies_neg2)
(step t7 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule resolution :premises (t5 t6))
(step t8 (cl (=> (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b)))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))))) :rule contraction :premises (t7))
(step t9 (cl (not (forall ((smt__a Idv) (smt__b Idv) (smt__x Idv)) (= (smt__TLA______Mem smt__x (smt__TLA______Cap smt__a smt__b)) (and (smt__TLA______Mem smt__x smt__a) (smt__TLA______Mem smt__x smt__b))))) (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule implies :premises (t8))
(step t10 (cl (= (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______Cap (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___) (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))) (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule resolution :premises (t9 a5))
(step t11 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___)))) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___))) :rule and_pos)
(step t12 (cl (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule reordering :premises (t11))
(step t13 (cl (not (and (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c1___)) (smt__TLA______Mem smt__CONSTANT___r___ (smt__TLA______FunApp smt__VARIABLE___alloc______prime smt__CONSTANT___c2___))))) :rule resolution :premises (t12 a34))
(step t14 (cl) :rule resolution :premises (t2 t10 t13 a28))

